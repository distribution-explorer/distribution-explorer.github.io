(function() {
  var fn = function() {
    
    (function(root) {
      function now() {
        return new Date();
      }
    
      var force = false;
    
      if (typeof root._bokeh_onload_callbacks === "undefined" || force === true) {
        root._bokeh_onload_callbacks = [];
        root._bokeh_is_loading = undefined;
      }
    
      
      
    
      var element = document.getElementById("896af9cc-55b9-4c32-a471-0fed1c69710d");
        if (element == null) {
          console.warn("Bokeh: autoload.js configured with elementid '896af9cc-55b9-4c32-a471-0fed1c69710d' but no matching script tag was found.")
        }
      
    
      function run_callbacks() {
        try {
          root._bokeh_onload_callbacks.forEach(function(callback) {
            if (callback != null)
              callback();
          });
        } finally {
          delete root._bokeh_onload_callbacks
        }
        console.debug("Bokeh: all callbacks have finished");
      }
    
      function load_libs(css_urls, js_urls, callback) {
        if (css_urls == null) css_urls = [];
        if (js_urls == null) js_urls = [];
    
        root._bokeh_onload_callbacks.push(callback);
        if (root._bokeh_is_loading > 0) {
          console.debug("Bokeh: BokehJS is being loaded, scheduling callback at", now());
          return null;
        }
        if (js_urls == null || js_urls.length === 0) {
          run_callbacks();
          return null;
        }
        console.debug("Bokeh: BokehJS not loaded, scheduling load and callback at", now());
        root._bokeh_is_loading = css_urls.length + js_urls.length;
    
        function on_load() {
          root._bokeh_is_loading--;
          if (root._bokeh_is_loading === 0) {
            console.debug("Bokeh: all BokehJS libraries/stylesheets loaded");
            run_callbacks()
          }
        }
    
        function on_error(url) {
          console.error("failed to load " + url);
        }
    
        for (let i = 0; i < css_urls.length; i++) {
          const url = css_urls[i];
          const element = document.createElement("link");
          element.onload = on_load;
          element.onerror = on_error.bind(null, url);
          element.rel = "stylesheet";
          element.type = "text/css";
          element.href = url;
          console.debug("Bokeh: injecting link tag for BokehJS stylesheet: ", url);
          document.body.appendChild(element);
        }
    
        const hashes = {"https://cdn.bokeh.org/bokeh/release/bokeh-2.3.3.min.js": "dM3QQsP+wXdHg42wTqW85BjZQdLNNIXqlPw/BgKoExPmTG7ZLML4EGqLMfqHT6ON", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.3.3.min.js": "8x57I4YuIfu8XyZfFo0XVr2WAT8EK4rh/uDe3wF7YuW2FNUSNEpJbsPaB1nJ2fz2", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.3.3.min.js": "3QTqdz9LyAm2i0sG5XTePsHec3UHWwVsrOL68SYRoAXsafvfAyqtQ+h440+qIBhS"};
    
        for (let i = 0; i < js_urls.length; i++) {
          const url = js_urls[i];
          const element = document.createElement('script');
          element.onload = on_load;
          element.onerror = on_error.bind(null, url);
          element.async = false;
          element.src = url;
          if (url in hashes) {
            element.crossOrigin = "anonymous";
            element.integrity = "sha384-" + hashes[url];
          }
          console.debug("Bokeh: injecting script tag for BokehJS library: ", url);
          document.head.appendChild(element);
        }
      };
    
      function inject_raw_css(css) {
        const element = document.createElement("style");
        element.appendChild(document.createTextNode(css));
        document.body.appendChild(element);
      }
    
      
      var js_urls = ["https://cdn.bokeh.org/bokeh/release/bokeh-2.3.3.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.3.3.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.3.3.min.js"];
      var css_urls = [];
      
    
      var inline_js = [
        function(Bokeh) {
          Bokeh.set_log_level("info");
        },
        
        function(Bokeh) {
          (function() {
            var fn = function() {
              Bokeh.safely(function() {
                (function(root) {
                  function embed_document(root) {
                    
                  var docs_json = '{"003dce52-cb89-4666-93f6-e52de06e9d96":{"defs":[],"roots":{"references":[{"attributes":{"axis_label":"y","formatter":{"id":"3002"},"major_label_policy":{"id":"3001"},"ticker":{"id":"2908"}},"id":"2907","type":"LinearAxis"},{"attributes":{"children":[{"id":"3022"},{"id":"3024"}]},"id":"3025","type":"Row"},{"attributes":{"axis_label":"PDF","formatter":{"id":"2999"},"major_label_policy":{"id":"2998"},"ticker":{"id":"2912"}},"id":"2911","type":"LinearAxis"},{"attributes":{"toolbar":{"id":"3023"}},"id":"3024","type":"ToolbarBox"},{"attributes":{},"id":"2916","type":"WheelZoomTool"},{"attributes":{},"id":"2918","type":"SaveTool"},{"attributes":{"bottom_units":"screen","fill_alpha":0.5,"fill_color":"lightgrey","left_units":"screen","level":"overlay","line_alpha":1.0,"line_color":"black","line_dash":[4,4],"line_width":2,"right_units":"screen","syncable":false,"top_units":"screen"},"id":"2954","type":"BoxAnnotation"},{"attributes":{"active_multi":null,"tools":[{"id":"2915"},{"id":"2916"},{"id":"2917"},{"id":"2918"},{"id":"2919"},{"id":"2920"}]},"id":"2922","type":"Toolbar"},{"attributes":{},"id":"3004","type":"Selection"},{"attributes":{"data":{"x":{"__ndarray__":"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","dtype":"float64","order":"little","shape":[400]},"y_p":{"__ndarray__":"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","dtype":"float64","order":"little","shape":[400]}},"selected":{"id":"3004"},"selection_policy":{"id":"3005"}},"id":"2963","type":"ColumnDataSource"},{"attributes":{},"id":"3005","type":"UnionRenderers"},{"attributes":{"children":[{"id":"2981"},{"id":"2978"},{"id":"2984"}]},"id":"2993","type":"Row"},{"attributes":{"width":30},"id":"2995","type":"Spacer"},{"attributes":{"overlay":{"id":"2921"}},"id":"2917","type":"BoxZoomTool"},{"attributes":{"args":{"max_value":"Infinity","min_value":"-Infinity","slider":{"id":"2977"}},"code":"\\nslider.end = Math.min(max_value, Number(cb_obj.value));\\n"},"id":"2988","type":"CustomJS"},{"attributes":{"end":1.05,"start":-0.05},"id":"2962","type":"Range1d"},{"attributes":{"toolbars":[{"id":"2922"},{"id":"2955"}],"tools":[{"id":"2915"},{"id":"2916"},{"id":"2917"},{"id":"2918"},{"id":"2919"},{"id":"2920"},{"id":"2948"},{"id":"2949"},{"id":"2950"},{"id":"2951"},{"id":"2952"},{"id":"2953"}]},"id":"3023","type":"ProxyToolbar"},{"attributes":{},"id":"2949","type":"WheelZoomTool"},{"attributes":{"background_fill_alpha":0,"below":[{"id":"2907"}],"border_fill_alpha":0,"center":[{"id":"2910"},{"id":"2914"}],"frame_height":175,"frame_width":300,"left":[{"id":"2911"}],"renderers":[{"id":"2973"}],"title":{"id":"2897"},"toolbar":{"id":"2922"},"toolbar_location":null,"x_range":{"id":"2899"},"x_scale":{"id":"2903"},"y_range":{"id":"2901"},"y_scale":{"id":"2905"}},"id":"2896","subtype":"Figure","type":"Plot"},{"attributes":{"js_property_callbacks":{"change:value":[{"id":"2988"}]},"value":"1.0","width":70},"id":"2983","type":"TextInput"},{"attributes":{},"id":"3011","type":"AllLabels"},{"attributes":{"args":{"arg1":{"id":"2976"},"arg2":{"id":"2977"},"arg3":{"id":"2978"},"discrete":false,"dist":"halfstudent_t","n":400,"source_c":{"id":"2964"},"source_p":{"id":"2963"},"xrange":{"id":"2899"}},"code":"function linspace(start, stop, n) {\\n\\tvar x = [];\\n\\tvar currValue = start;\\n\\tvar step = (stop - start) / (n - 1);\\n\\tfor (var i = 0; i &lt; n; i++) {\\n\\t\\tx.push(currValue);\\n\\t\\tcurrValue += step;\\n\\t}\\n\\treturn x;\\n}\\n\\nfunction update_y_p(probFun, x_p, arg1, arg2, arg3) {\\n    // Compute PMF/PDF\\n    var y_p = [];\\n    for (var i = 0; i &lt; x_p.length; i++) {\\n      y_p.push(probFun(x_p[i], arg1, arg2, arg3));\\n    }\\n\\n    return y_p;\\n}\\n\\nfunction update_y_c_continuous(cdfFun, x_c, arg1, arg2, arg3) {\\n    var y_c = [];\\n    for (var i = 0; i &lt; x_c.length; i ++)\\n        y_c.push(cdfFun(x_c[i], arg1, arg2, arg3));\\n\\n    return y_c;\\n}\\n\\nfunction lngamma(z) {\\n    // Compute log of the Gamma function using Lanczos approx.,\\n    // see https://en.wikipedia.org/wiki/Lanczos_approximation.\\n\\n    if(z &lt; 0) return Number(&#x27;0/0&#x27;);\\n\\n    if (z &lt; 0.5) return Math.log(Math.PI) - Math.log(Math.sin(Math.PI * z)) - lngamma(1-z);\\n\\n    var p = [676.5203681218851,\\n             -1259.1392167224028,\\n             771.32342877765313,\\n             -176.61502916214059,\\n             12.507343278686905,\\n             -0.13857109526572012,\\n             9.9843695780195716e-6,\\n             1.5056327351493116e-7];\\n\\n    z -= 1.0;\\n    var Ag = 0.99999999999980993;\\n    for (var i = 0; i &lt; p.length; i++) {\\n        Ag += p[i] / (z + i + 1);\\n    }\\n    var t = z + p.length - 0.5;\\n\\n    return 0.5 * Math.log(2*Math.PI) + (z + 0.5)*Math.log(t) - t + Math.log(Ag);\\n}\\n\\n\\n\\nfunction log1p(x) {\\n    // log of 1 + x, \\n    // adapted from Andreas Madsen&#x27;s mathfn, Copyright (c) 2013 Andreas Madsen\\n    if (x &lt;= -1.0) {\\n        throw new RangeError(&#x27;Argument must be greater than -1.0&#x27;);\\n    }\\n\\n    // x is large enough that the obvious evaluation is OK\\n    else if (Math.abs(x) &gt; 1e-4) {\\n        return Math.log(1.0 + x);\\n    }\\n\\n    // Use Taylor approx. log(1 + x) = x - x^2/2 with error roughly x^3/3\\n    // Since |x| &lt; 10^-4, |x|^3 &lt; 10^-12, relative error less than 10^-8\\n    else {\\n        return (-0.5*x + 1.0)*x;\\n    }\\n}\\n\\n\\n\\nfunction regularized_incomplete_beta(x, a, b) {\\n    // From Andreas Madsen&#x27;s mathfn, Copyright (c) 2013 Andreas Madsen\\n    // Computes incomplete beta function as a continued fraction\\n    if (x &lt; 0 || x &gt; 1) {\\n        throw new RangeError(&#x27;First argument must be between 0 and 1.&#x27;);\\n    }\\n\\n    // Special cases, there can make trouble otherwise\\n    else if (a === 1 &amp;&amp; b === 1) return x;\\n    else if (x === 0) return 0;\\n    else if (x === 1) return 1;\\n    else if (a === 0) return 1;\\n    else if (b === 0) return 0;\\n\\n    else {\\n        var bt = Math.exp(lngamma(a + b) - lngamma(a) - lngamma(b) + a * Math.log(x) + b * log1p(-x));\\n\\n        // Use continued fraction directly.\\n        if (x &lt; (a + 1) / (a + b + 2)) return bt * betacf(x, a, b) / a;\\n\\n        // else use continued fraction after making the symmetry transformation.\\n        else return 1 - bt * betacf(1 - x, b, a) / b;\\n    }\\n}\\n\\n\\n\\nfunction betacf(x, a, b) {\\n    // From Andreas Madsen&#x27;s mathfn, Copyright (c) 2013 Andreas Madsen\\n    // Computes incomplete beta function as a continues fraction\\n    var fpmin = 1e-30,\\n        m = 1,\\n        m2, aa, c, d, del, h, qab, qam, qap;\\n    // These q&#x27;s will be used in factors that occur in the coefficients\\n    qab = a + b;\\n    qap = a + 1;\\n    qam = a - 1;\\n    c = 1;\\n    d = 1 - qab * x / qap;\\n    if (Math.abs(d) &lt; fpmin) d = fpmin;\\n    d = 1 / d;\\n    h = d;\\n    for (; m &lt;= 100; m++) {\\n        m2 = 2 * m;\\n        aa = m * (b - m) * x / ((qam + m2) * (a + m2));\\n        // One step (the even one) of the recurrence\\n        d = 1 + aa * d;\\n        if (Math.abs(d) &lt; fpmin) d = fpmin;\\n        c = 1 + aa / c;\\n        if (Math.abs(c) &lt; fpmin) c = fpmin;\\n        d = 1 / d;\\n        h *= d * c;\\n        aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2));\\n        // Next step of the recurrence (the odd one)\\n        d = 1 + aa * d;\\n        if (Math.abs(d) &lt; fpmin) d = fpmin;\\n        c = 1 + aa / c;\\n        if (Math.abs(c) &lt; fpmin) c = fpmin;\\n        d = 1 / d;\\n        del = d * c;\\n        h *= del;\\n        if (Math.abs(del - 1.0) &lt; 3e-7) break;\\n    }\\n    return h;\\n}\\n\\n\\n\\nfunction probFun(x, nu, mu, sigma) {\\n    if (x &lt; mu) return NaN;\\n\\n    var lnprob;\\n\\n    lnprob = Math.log(2.0) + lngamma((nu+1)/2) - lngamma(nu/2) - Math.log(Math.PI * nu) / 2 \\n             - Math.log(sigma) - (nu+1)/2 * log1p(Math.pow(x - mu, 2) / nu / Math.pow(sigma, 2));\\n\\n    return Math.exp(lnprob);\\n}\\n\\nfunction cdfFun(x, nu, mu, sigma) {\\n    if (x &lt; mu) return 0.0;\\n\\n    var y = (x - mu) / sigma;\\n\\n    return 1 - regularized_incomplete_beta(nu / (y**2 + nu), 0.5*nu, 0.5);\\n}\\n\\n// Extract data from sources\\nvar data_p = source_p.data;\\nvar data_c = source_c.data;\\nvar x_p = data_p[&#x27;x&#x27;];\\nvar y_p = data_p[&#x27;y_p&#x27;];\\nvar x_c = data_c[&#x27;x&#x27;];\\nvar y_c = data_c[&#x27;y_c&#x27;];\\nvar xRangeMin = xrange.start;\\nvar xRangeMax = xrange.end;\\n\\n// Make corrections for start and end points based on support\\n// We&#x27;re not doing this now because we want to allow zooming\\n// JS codes now make anything outside of support NaN.\\n// if (dist == &#x27;lognormal&#x27; \\n//     || dist == &#x27;gamma&#x27; \\n//     || dist == &#x27;exponential&#x27; \\n//     || dist == &#x27;inv_gamma&#x27;\\n//     || dist == &#x27;weibull&#x27;) {\\n// \\txRangeMin = 0.0;\\n// }\\n// else if (dist == &#x27;beta&#x27;) { \\n//     xRangeMin = 0.0;\\n//     xRangeMax = 1.0;\\n// }\\n\\n// x-values to evaluate PDF and CDF\\nx_p = linspace(xRangeMin, xRangeMax, n);\\nx_c = x_p;\\n\\n// Update sources with new x-values\\nsource_p.data[&#x27;x&#x27;] = x_p;\\nsource_c.data[&#x27;x&#x27;] = x_c;\\n\\n// Update the PDF and CDF\\nsource_p.data[&#x27;y_p&#x27;] = update_y_p(probFun, \\n    x_p, arg1.value, arg2.value, arg3.value);\\nsource_c.data[&#x27;y_c&#x27;] = update_y_c_continuous(cdfFun, \\n    x_c, arg1.value, arg2.value, arg3.value);\\n\\nsource_p.change.emit();\\nsource_c.change.emit();\\n"},"id":"2975","type":"CustomJS"},{"attributes":{"args":{"max_value":"Infinity","min_value":"0","slider":{"id":"2976"}},"code":"\\n    slider.start = Math.max(min_value, Number(cb_obj.value));\\n"},"id":"2985","type":"CustomJS"},{"attributes":{},"id":"2901","type":"DataRange1d"},{"attributes":{},"id":"3012","type":"BasicTickFormatter"},{"attributes":{"args":{"max_value":"Infinity","min_value":"0","slider":{"id":"2976"}},"code":"\\nslider.end = Math.min(max_value, Number(cb_obj.value));\\n"},"id":"2986","type":"CustomJS"},{"attributes":{"args":{"max_value":"Infinity","min_value":"0","slider":{"id":"2978"}},"code":"\\nslider.end = Math.min(max_value, Number(cb_obj.value));\\n"},"id":"2990","type":"CustomJS"},{"attributes":{"data":{"x":{"__ndarray__":"AAAAAAAAAACASAEiBYh0P4BIASIFiIQ/wOwBswfMjj+ASAEiBYiUP6CagWoGqpk/wOwBswfMnj9wH8F9BPehP4BIASIFiKQ/kHFBxgUZpz+gmoFqBqqpP7DDwQ4HO6w/wOwBswfMrj/oCqErhK6wP3AfwX0E97E/+DPhz4Q/sz+ASAEiBYi0PwhdIXSF0LU/kHFBxgUZtz8YhmEYhmG4P6CagWoGqrk/KK+hvIbyuj+ww8EOBzu8PzjY4WCHg70/wOwBswfMvj+kAJECRArAP+gKoSuErsA/LBWxVMRSwT9wH8F9BPfBP7Qp0aZEm8I/+DPhz4Q/wz88PvH4xOPDP4BIASIFiMQ/xFIRS0UsxT8IXSF0hdDFP0xnMZ3FdMY/kHFBxgUZxz/Ue1HvRb3HPxiGYRiGYcg/XJBxQcYFyT+gmoFqBqrJP+SkkZNGTso/KK+hvIbyyj9subHlxpbLP7DDwQ4HO8w/9M3RN0ffzD842OFgh4PNP3zi8YnHJ84/wOwBswfMzj8E9xHcR3DPP6QAkQJECtA/xgUZF2Rc0D/oCqErhK7QPwoQKUCkANE/LBWxVMRS0T9OGjlp5KTRP3AfwX0E99E/kiRJkiRJ0j+0KdGmRJvSP9YuWbtk7dI/+DPhz4Q/0z8aOWnkpJHTPzw+8fjE49M/XkN5DeU11D+ASAEiBYjUP6JNiTYl2tQ/xFIRS0Us1T/mV5lfZX7VPwhdIXSF0NU/KmKpiKUi1j9MZzGdxXTWP25subHlxtY/kHFBxgUZ1z+ydsnaJWvXP9R7Ue9Fvdc/9oDZA2YP2D8YhmEYhmHYPzqL6Syms9g/XJBxQcYF2T9+lflV5lfZP6CagWoGqtk/wp8Jfyb82T/kpJGTRk7aPwaqGahmoNo/KK+hvIby2j9KtCnRpkTbP2y5seXGlts/jr45+ubo2z+ww8EOBzvcP9LISSMnjdw/9M3RN0ff3D8W01lMZzHdPzjY4WCHg90/Wt1pdafV3T984vGJxyfeP57neZ7ned4/wOwBswfM3j/i8YnHJx7fPwT3EdxHcN8/JvyZ8GfC3z+kAJECRArgPzUD1QxUM+A/xgUZF2Rc4D9XCF0hdIXgP+gKoSuEruA/eQ3lNZTX4D8KEClApADhP5sSbUq0KeE/LBWxVMRS4T+9F/Ve1HvhP04aOWnkpOE/3xx9c/TN4T9wH8F9BPfhPwEiBYgUIOI/kiRJkiRJ4j8jJ42cNHLiP7Qp0aZEm+I/RSwVsVTE4j/WLlm7ZO3iP2cxncV0FuM/+DPhz4Q/4z+JNiXalGjjPxo5aeSkkeM/qzut7rS64z88PvH4xOPjP81ANQPVDOQ/XkN5DeU15D/vRb0X9V7kP4BIASIFiOQ/EUtFLBWx5D+iTYk2JdrkPzNQzUA1A+U/xFIRS0Us5T9VVVVVVVXlP+ZXmV9lfuU/d1rdaXWn5T8IXSF0hdDlP5lfZX6V+eU/KmKpiKUi5j+7ZO2StUvmP0xnMZ3FdOY/3Wl1p9Wd5j9ubLmx5cbmP/9u/bv17+Y/kHFBxgUZ5z8hdIXQFULnP7J2ydola+c/Q3kN5TWU5z/Ue1HvRb3nP2V+lflV5uc/9oDZA2YP6D+Hgx0OdjjoPxiGYRiGYeg/qYilIpaK6D86i+ksprPoP8uNLTe23Og/XJBxQcYF6T/tkrVL1i7pP36V+VXmV+k/D5g9YPaA6T+gmoFqBqrpPzGdxXQW0+k/wp8Jfyb86T9Tok2JNiXqP+SkkZNGTuo/dafVnVZ36j8GqhmoZqDqP5esXbJ2yeo/KK+hvIby6j+5seXGlhvrP0q0KdGmROs/27Zt27Zt6z9subHlxpbrP/279e/Wv+s/jr45+ubo6z8fwX0E9xHsP7DDwQ4HO+w/QcYFGRdk7D/SyEkjJ43sP2PLjS03tuw/9M3RN0ff7D+F0BVCVwjtPxbTWUxnMe0/p9WdVnda7T842OFgh4PtP8naJWuXrO0/Wt1pdafV7T/r361/t/7tP3zi8YnHJ+4/DeU1lNdQ7j+e53me53nuPy/qvaj3ou4/wOwBswfM7j9R70W9F/XuP+LxiccnHu8/c/TN0TdH7z8E9xHcR3DvP5X5VeZXme8/JvyZ8GfC7z+3/t36d+vvP6QAkQJECvA/7AGzB8we8D81A9UMVDPwP34E9xHcR/A/xgUZF2Rc8D8OBzsc7HDwP1cIXSF0hfA/oAl/JvyZ8D/oCqErhK7wPzAMwzAMw/A/eQ3lNZTX8D/CDgc7HOzwPwoQKUCkAPE/UhFLRSwV8T+bEm1KtCnxP+QTj088PvE/LBWxVMRS8T90FtNZTGfxP70X9V7Ue/E/BhkXZFyQ8T9OGjlp5KTxP5YbW25sufE/3xx9c/TN8T8oHp94fOLxP3AfwX0E9/E/uCDjgowL8j8BIgWIFCDyP0ojJ42cNPI/kiRJkiRJ8j/aJWuXrF3yPyMnjZw0cvI/bCivobyG8j+0KdGmRJvyP/wq86vMr/I/RSwVsVTE8j+OLTe23NjyP9YuWbtk7fI/HjB7wOwB8z9nMZ3FdBbzP7Ayv8r8KvM/+DPhz4Q/8z9ANQPVDFTzP4k2JdqUaPM/0jdH3xx98z8aOWnkpJHzP2I6i+kspvM/qzut7rS68z/0PM/zPM/zPzw+8fjE4/M/hD8T/kz48z/NQDUD1Qz0PxZCVwhdIfQ/XkN5DeU19D+mRJsSbUr0P+9FvRf1XvQ/OEffHH1z9D+ASAEiBYj0P8hJIyeNnPQ/EUtFLBWx9D9aTGcxncX0P6JNiTYl2vQ/6k6rO63u9D8zUM1ANQP1P3xR70W9F/U/xFIRS0Us9T8MVDNQzUD1P1VVVVVVVfU/nlZ3Wt1p9T/mV5lfZX71Py5Zu2TtkvU/d1rdaXWn9T/AW/9u/bv1PwhdIXSF0PU/UF5DeQ3l9T+ZX2V+lfn1P+Jgh4MdDvY/KmKpiKUi9j9yY8uNLTf2P7tk7ZK1S/Y/BGYPmD1g9j9MZzGdxXT2P5RoU6JNifY/3Wl1p9Wd9j8ma5esXbL2P25subHlxvY/tm3btm3b9j//bv279e/2P0hwH8F9BPc/kHFBxgUZ9z/YcmPLjS33PyF0hdAVQvc/anWn1Z1W9z+ydsnaJWv3P/p369+tf/c/Q3kN5TWU9z+Mei/qvaj3P9R7Ue9Fvfc/HH1z9M3R9z9lfpX5Veb3P65/t/7d+vc/9oDZA2YP+D8+gvsI7iP4P4eDHQ52OPg/0IQ/E/5M+D8YhmEYhmH4P2CHgx0Odvg/qYilIpaK+D/yiccnHp/4PzqL6Syms/g/gowLMi7I+D/LjS03ttz4PxSPTzw+8fg/XJBxQcYF+T+kkZNGThr5P+2StUvWLvk/NpTXUF5D+T9+lflV5lf5P8aWG1tubPk/D5g9YPaA+T9YmV9lfpX5P6CagWoGqvk/6Jujb46++T8xncV0FtP5P3qe53me5/k/wp8Jfyb8+T8KoSuErhD6P1OiTYk2Jfo/nKNvjr45+j/kpJGTRk76Pyyms5jOYvo/dafVnVZ3+j++qPei3ov6PwaqGahmoPo/Tqs7re60+j+XrF2ydsn6P+Ctf7f+3fo/KK+hvIby+j9wsMPBDgf7P7mx5caWG/s/ArMHzB4w+z9KtCnRpkT7P5K1S9YuWfs/27Zt27Zt+z8kuI/gPoL7P2y5seXGlvs/tLrT6k6r+z/9u/Xv1r/7P0a9F/Ve1Ps/jr45+ubo+z/Wv1v/bv37Px/BfQT3Efw/aMKfCX8m/D+ww8EOBzv8P/jE4xOPT/w/QcYFGRdk/D+Kxycen3j8P9LISSMnjfw/GsprKK+h/D9jy40tN7b8P6zMrzK/yvw/9M3RN0ff/D88z/M8z/P8P4XQFUJXCP0/ztE3R98c/T8W01lMZzH9P17Ue1HvRf0/p9WdVnda/T/w1r9b/279PzjY4WCHg/0/gNkDZg+Y/T/J2iVrl6z9PxLcR3Afwf0/Wt1pdafV/T+i3ot6L+r9P+vfrX+3/v0/NOHPhD8T/j984vGJxyf+P8TjE49PPP4/DeU1lNdQ/j9W5leZX2X+P57neZ7nef4/5uibo2+O/j8v6r2o96L+P3jr361/t/4/wOwBswfM/j8I7iO4j+D+P1HvRb0X9f4/mvBnwp8J/z/i8YnHJx7/Pyrzq8yvMv8/c/TN0TdH/z+89e/Wv1v/PwT3EdxHcP8/TPgz4c+E/z+V+VXmV5n/P976d+vfrf8/JvyZ8GfC/z9u/bv179b/P7f+3fp36/8/AAAAAAAAAEA=","dtype":"float64","order":"little","shape":[400]},"y_c":{"__ndarray__":"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","dtype":"float64","order":"little","shape":[400]}},"selected":{"id":"3006"},"selection_policy":{"id":"3007"}},"id":"2964","type":"ColumnDataSource"},{"attributes":{"end":1.0,"js_property_callbacks":{"change:value":[{"id":"2975"}]},"start":0.0,"step":0.01,"title":"\\u03bc","value":0},"id":"2977","type":"Slider"},{"attributes":{},"id":"2908","type":"BasicTicker"},{"attributes":{"axis_label":"CDF","formatter":{"id":"3012"},"major_label_policy":{"id":"3011"},"ticker":{"id":"2945"}},"id":"2944","type":"LinearAxis"},{"attributes":{"js_property_callbacks":{"change:value":[{"id":"2989"}]},"value":"0.1","width":70},"id":"2981","type":"TextInput"},{"attributes":{"background_fill_alpha":0,"below":[{"id":"2940"}],"border_fill_alpha":0,"center":[{"id":"2943"},{"id":"2947"}],"frame_height":175,"frame_width":300,"left":[{"id":"2944"}],"renderers":[{"id":"2968"}],"title":{"id":"2930"},"toolbar":{"id":"2955"},"toolbar_location":null,"x_range":{"id":"2899"},"x_scale":{"id":"2936"},"y_range":{"id":"2962"},"y_scale":{"id":"2938"}},"id":"2929","subtype":"Figure","type":"Plot"},{"attributes":{"js_property_callbacks":{"change:value":[{"id":"2986"}]},"value":"10","width":70},"id":"2982","type":"TextInput"},{"attributes":{"axis":{"id":"2944"},"dimension":1,"ticker":null},"id":"2947","type":"Grid"},{"attributes":{},"id":"2912","type":"BasicTicker"},{"attributes":{},"id":"2920","type":"HelpTool"},{"attributes":{},"id":"2915","type":"PanTool"},{"attributes":{},"id":"2999","type":"BasicTickFormatter"},{"attributes":{"axis":{"id":"2911"},"dimension":1,"ticker":null},"id":"2914","type":"Grid"},{"attributes":{},"id":"2936","type":"LinearScale"},{"attributes":{"line_color":"#1f77b4","line_width":2,"x":{"field":"x"},"y":{"field":"y_c"}},"id":"2966","type":"Line"},{"attributes":{},"id":"2941","type":"BasicTicker"},{"attributes":{"data_source":{"id":"2964"},"glyph":{"id":"2966"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"2967"},"view":{"id":"2969"}},"id":"2968","type":"GlyphRenderer"},{"attributes":{},"id":"3006","type":"Selection"},{"attributes":{"children":[[{"id":"2896"},0,0],[{"id":"2995"},0,1],[{"id":"2929"},0,2]]},"id":"3022","type":"GridBox"},{"attributes":{"text":" "},"id":"2930","type":"Title"},{"attributes":{},"id":"2945","type":"BasicTicker"},{"attributes":{"js_property_callbacks":{"change:end":[{"id":"2975"}],"change:start":[{"id":"2975"}]},"range_padding":0},"id":"2899","type":"DataRange1d"},{"attributes":{"line_alpha":0.1,"line_color":"#1f77b4","line_width":2,"x":{"field":"x"},"y":{"field":"y_p"}},"id":"2972","type":"Line"},{"attributes":{},"id":"2905","type":"LinearScale"},{"attributes":{},"id":"2952","type":"ResetTool"},{"attributes":{"axis":{"id":"2907"},"ticker":null},"id":"2910","type":"Grid"},{"attributes":{},"id":"2951","type":"SaveTool"},{"attributes":{},"id":"2998","type":"AllLabels"},{"attributes":{"text":"Half-Student-t"},"id":"2897","type":"Title"},{"attributes":{"data_source":{"id":"2963"},"glyph":{"id":"2971"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"2972"},"view":{"id":"2974"}},"id":"2973","type":"GlyphRenderer"},{"attributes":{"axis":{"id":"2940"},"ticker":null},"id":"2943","type":"Grid"},{"attributes":{"line_color":"#1f77b4","line_width":2,"x":{"field":"x"},"y":{"field":"y_p"}},"id":"2971","type":"Line"},{"attributes":{"children":[{"id":"2991"},{"id":"2992"},{"id":"2993"}]},"id":"2994","type":"Column"},{"attributes":{},"id":"2953","type":"HelpTool"},{"attributes":{"source":{"id":"2964"}},"id":"2969","type":"CDSView"},{"attributes":{"end":1.0,"js_property_callbacks":{"change:value":[{"id":"2975"}]},"start":0.1,"step":0.01,"title":"\\u03c3","value":0.2},"id":"2978","type":"Slider"},{"attributes":{},"id":"3002","type":"BasicTickFormatter"},{"attributes":{},"id":"2948","type":"PanTool"},{"attributes":{"end":10,"js_property_callbacks":{"change:value":[{"id":"2975"}]},"start":1,"step":0.01,"title":"\\u03bd","value":2},"id":"2976","type":"Slider"},{"attributes":{"args":{"max_value":"Infinity","min_value":"0","slider":{"id":"2978"}},"code":"\\n    slider.start = Math.max(min_value, Number(cb_obj.value));\\n"},"id":"2989","type":"CustomJS"},{"attributes":{},"id":"3007","type":"UnionRenderers"},{"attributes":{"height":10},"id":"3026","type":"Spacer"},{"attributes":{},"id":"3001","type":"AllLabels"},{"attributes":{"overlay":{"id":"2954"}},"id":"2950","type":"BoxZoomTool"},{"attributes":{},"id":"2938","type":"LinearScale"},{"attributes":{"js_property_callbacks":{"change:value":[{"id":"2987"}]},"value":"0.0","width":70},"id":"2980","type":"TextInput"},{"attributes":{},"id":"2919","type":"ResetTool"},{"attributes":{"js_property_callbacks":{"change:value":[{"id":"2990"}]},"value":"1.0","width":70},"id":"2984","type":"TextInput"},{"attributes":{},"id":"3015","type":"BasicTickFormatter"},{"attributes":{"axis_label":"y","formatter":{"id":"3015"},"major_label_policy":{"id":"3014"},"ticker":{"id":"2941"}},"id":"2940","type":"LinearAxis"},{"attributes":{"children":[{"id":"2994"},{"id":"3026"},{"id":"3025"}]},"id":"3027","type":"Column"},{"attributes":{"args":{"max_value":"Infinity","min_value":"-Infinity","slider":{"id":"2977"}},"code":"\\n    slider.start = Math.max(min_value, Number(cb_obj.value));\\n"},"id":"2987","type":"CustomJS"},{"attributes":{},"id":"2903","type":"LinearScale"},{"attributes":{"children":[{"id":"2979"},{"id":"2976"},{"id":"2982"}]},"id":"2991","type":"Row"},{"attributes":{"bottom_units":"screen","fill_alpha":0.5,"fill_color":"lightgrey","left_units":"screen","level":"overlay","line_alpha":1.0,"line_color":"black","line_dash":[4,4],"line_width":2,"right_units":"screen","syncable":false,"top_units":"screen"},"id":"2921","type":"BoxAnnotation"},{"attributes":{"line_alpha":0.1,"line_color":"#1f77b4","line_width":2,"x":{"field":"x"},"y":{"field":"y_c"}},"id":"2967","type":"Line"},{"attributes":{"children":[{"id":"2980"},{"id":"2977"},{"id":"2983"}]},"id":"2992","type":"Row"},{"attributes":{"source":{"id":"2963"}},"id":"2974","type":"CDSView"},{"attributes":{},"id":"3014","type":"AllLabels"},{"attributes":{"active_multi":null,"tools":[{"id":"2948"},{"id":"2949"},{"id":"2950"},{"id":"2951"},{"id":"2952"},{"id":"2953"}]},"id":"2955","type":"Toolbar"},{"attributes":{"js_property_callbacks":{"change:value":[{"id":"2985"}]},"value":"1","width":70},"id":"2979","type":"TextInput"}],"root_ids":["3027"]},"title":"Bokeh Application","version":"2.3.3"}}';
                  var render_items = [{"docid":"003dce52-cb89-4666-93f6-e52de06e9d96","root_ids":["3027"],"roots":{"3027":"896af9cc-55b9-4c32-a471-0fed1c69710d"}}];
                  root.Bokeh.embed.embed_items(docs_json, render_items);
                
                  }
                  if (root.Bokeh !== undefined) {
                    embed_document(root);
                  } else {
                    var attempts = 0;
                    var timer = setInterval(function(root) {
                      if (root.Bokeh !== undefined) {
                        clearInterval(timer);
                        embed_document(root);
                      } else {
                        attempts++;
                        if (attempts > 100) {
                          clearInterval(timer);
                          console.log("Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing");
                        }
                      }
                    }, 10, root)
                  }
                })(window);
              });
            };
            if (document.readyState != "loading") fn();
            else document.addEventListener("DOMContentLoaded", fn);
          })();
        },
        function(Bokeh) {
        
        
        }
      ];
    
      function run_inline_js() {
        
        for (var i = 0; i < inline_js.length; i++) {
          inline_js[i].call(root, root.Bokeh);
        }
        
      }
    
      if (root._bokeh_is_loading === 0) {
        console.debug("Bokeh: BokehJS loaded, going straight to plotting");
        run_inline_js();
      } else {
        load_libs(css_urls, js_urls, function() {
          console.debug("Bokeh: BokehJS plotting callback run at", now());
          run_inline_js();
        });
      }
    }(window));
  };
  if (document.readyState != "loading") fn();
  else document.addEventListener("DOMContentLoaded", fn);
})();