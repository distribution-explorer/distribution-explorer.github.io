(function() {
  var fn = function() {
    
    (function(root) {
      function now() {
        return new Date();
      }
    
      var force = false;
    
      if (typeof root._bokeh_onload_callbacks === "undefined" || force === true) {
        root._bokeh_onload_callbacks = [];
        root._bokeh_is_loading = undefined;
      }
    
      
      
    
      var element = document.getElementById("631e4b6a-edef-4a24-a42e-c407db600ec5");
        if (element == null) {
          console.warn("Bokeh: autoload.js configured with elementid '631e4b6a-edef-4a24-a42e-c407db600ec5' but no matching script tag was found.")
        }
      
    
      function run_callbacks() {
        try {
          root._bokeh_onload_callbacks.forEach(function(callback) {
            if (callback != null)
              callback();
          });
        } finally {
          delete root._bokeh_onload_callbacks
        }
        console.debug("Bokeh: all callbacks have finished");
      }
    
      function load_libs(css_urls, js_urls, callback) {
        if (css_urls == null) css_urls = [];
        if (js_urls == null) js_urls = [];
    
        root._bokeh_onload_callbacks.push(callback);
        if (root._bokeh_is_loading > 0) {
          console.debug("Bokeh: BokehJS is being loaded, scheduling callback at", now());
          return null;
        }
        if (js_urls == null || js_urls.length === 0) {
          run_callbacks();
          return null;
        }
        console.debug("Bokeh: BokehJS not loaded, scheduling load and callback at", now());
        root._bokeh_is_loading = css_urls.length + js_urls.length;
    
        function on_load() {
          root._bokeh_is_loading--;
          if (root._bokeh_is_loading === 0) {
            console.debug("Bokeh: all BokehJS libraries/stylesheets loaded");
            run_callbacks()
          }
        }
    
        function on_error(url) {
          console.error("failed to load " + url);
        }
    
        for (let i = 0; i < css_urls.length; i++) {
          const url = css_urls[i];
          const element = document.createElement("link");
          element.onload = on_load;
          element.onerror = on_error.bind(null, url);
          element.rel = "stylesheet";
          element.type = "text/css";
          element.href = url;
          console.debug("Bokeh: injecting link tag for BokehJS stylesheet: ", url);
          document.body.appendChild(element);
        }
    
        const hashes = {"https://cdn.bokeh.org/bokeh/release/bokeh-2.3.3.min.js": "dM3QQsP+wXdHg42wTqW85BjZQdLNNIXqlPw/BgKoExPmTG7ZLML4EGqLMfqHT6ON", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.3.3.min.js": "8x57I4YuIfu8XyZfFo0XVr2WAT8EK4rh/uDe3wF7YuW2FNUSNEpJbsPaB1nJ2fz2", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.3.3.min.js": "3QTqdz9LyAm2i0sG5XTePsHec3UHWwVsrOL68SYRoAXsafvfAyqtQ+h440+qIBhS"};
    
        for (let i = 0; i < js_urls.length; i++) {
          const url = js_urls[i];
          const element = document.createElement('script');
          element.onload = on_load;
          element.onerror = on_error.bind(null, url);
          element.async = false;
          element.src = url;
          if (url in hashes) {
            element.crossOrigin = "anonymous";
            element.integrity = "sha384-" + hashes[url];
          }
          console.debug("Bokeh: injecting script tag for BokehJS library: ", url);
          document.head.appendChild(element);
        }
      };
    
      function inject_raw_css(css) {
        const element = document.createElement("style");
        element.appendChild(document.createTextNode(css));
        document.body.appendChild(element);
      }
    
      
      var js_urls = ["https://cdn.bokeh.org/bokeh/release/bokeh-2.3.3.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.3.3.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.3.3.min.js"];
      var css_urls = [];
      
    
      var inline_js = [
        function(Bokeh) {
          Bokeh.set_log_level("info");
        },
        
        function(Bokeh) {
          (function() {
            var fn = function() {
              Bokeh.safely(function() {
                (function(root) {
                  function embed_document(root) {
                    
                  var docs_json = '{"fd5a51a9-05f3-4427-8c09-e713b1a128ec":{"defs":[],"roots":{"references":[{"attributes":{"axis_label":"CDF","formatter":{"id":"3219"},"major_label_policy":{"id":"3220"},"ticker":{"id":"3157"}},"id":"3156","type":"LinearAxis"},{"attributes":{},"id":"3128","type":"WheelZoomTool"},{"attributes":{"children":[{"id":"3198"},{"id":"3199"}]},"id":"3200","type":"Column"},{"attributes":{},"id":"3153","type":"BasicTicker"},{"attributes":{"axis":{"id":"3123"},"dimension":1,"ticker":null},"id":"3126","type":"Grid"},{"attributes":{"bottom_units":"screen","fill_alpha":0.5,"fill_color":"lightgrey","left_units":"screen","level":"overlay","line_alpha":1.0,"line_color":"black","line_dash":[4,4],"line_width":2,"right_units":"screen","syncable":false,"top_units":"screen"},"id":"3133","type":"BoxAnnotation"},{"attributes":{},"id":"3160","type":"PanTool"},{"attributes":{"data":{"x":{"__ndarray__":"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","dtype":"float64","order":"little","shape":[400]},"y_c":{"__ndarray__":"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","dtype":"float64","order":"little","shape":[400]}},"selected":{"id":"3212"},"selection_policy":{"id":"3213"}},"id":"3176","type":"ColumnDataSource"},{"attributes":{"axis_label":"y","formatter":{"id":"3216"},"major_label_policy":{"id":"3217"},"ticker":{"id":"3153"}},"id":"3152","type":"LinearAxis"},{"attributes":{},"id":"3130","type":"SaveTool"},{"attributes":{"js_property_callbacks":{"change:value":[{"id":"3196"}]},"value":"0.1","width":70},"id":"3191","type":"TextInput"},{"attributes":{"axis":{"id":"3156"},"dimension":1,"ticker":null},"id":"3159","type":"Grid"},{"attributes":{"background_fill_alpha":0,"below":[{"id":"3119"}],"border_fill_alpha":0,"center":[{"id":"3122"},{"id":"3126"}],"frame_height":175,"frame_width":300,"left":[{"id":"3123"}],"renderers":[{"id":"3185"}],"title":{"id":"3109"},"toolbar":{"id":"3134"},"toolbar_location":null,"x_range":{"id":"3111"},"x_scale":{"id":"3115"},"y_range":{"id":"3113"},"y_scale":{"id":"3117"}},"id":"3108","subtype":"Figure","type":"Plot"},{"attributes":{"line_color":"#1f77b4","line_width":2,"x":{"field":"x"},"y":{"field":"y_c"}},"id":"3178","type":"Line"},{"attributes":{"data_source":{"id":"3176"},"glyph":{"id":"3178"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"3179"},"view":{"id":"3181"}},"id":"3180","type":"GlyphRenderer"},{"attributes":{},"id":"3124","type":"BasicTicker"},{"attributes":{"data":{"x":{"__ndarray__":"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","dtype":"float64","order":"little","shape":[400]},"y_p":{"__ndarray__":"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","dtype":"float64","order":"little","shape":[400]}},"selected":{"id":"3209"},"selection_policy":{"id":"3210"}},"id":"3175","type":"ColumnDataSource"},{"attributes":{"line_alpha":0.1,"line_color":"#1f77b4","line_width":2,"x":{"field":"x"},"y":{"field":"y_c"}},"id":"3179","type":"Line"},{"attributes":{},"id":"3212","type":"Selection"},{"attributes":{"axis":{"id":"3152"},"ticker":null},"id":"3155","type":"Grid"},{"attributes":{},"id":"3217","type":"AllLabels"},{"attributes":{"overlay":{"id":"3133"}},"id":"3129","type":"BoxZoomTool"},{"attributes":{"js_property_callbacks":{"change:value":[{"id":"3197"}]},"value":"2","width":70},"id":"3193","type":"TextInput"},{"attributes":{},"id":"3132","type":"HelpTool"},{"attributes":{},"id":"3115","type":"LinearScale"},{"attributes":{},"id":"3120","type":"BasicTicker"},{"attributes":{"children":[{"id":"3191"},{"id":"3189"},{"id":"3193"}]},"id":"3199","type":"Row"},{"attributes":{},"id":"3113","type":"DataRange1d"},{"attributes":{},"id":"3131","type":"ResetTool"},{"attributes":{"axis":{"id":"3119"},"ticker":null},"id":"3122","type":"Grid"},{"attributes":{"js_property_callbacks":{"change:value":[{"id":"3194"}]},"value":"0.01","width":70},"id":"3190","type":"TextInput"},{"attributes":{"bottom_units":"screen","fill_alpha":0.5,"fill_color":"lightgrey","left_units":"screen","level":"overlay","line_alpha":1.0,"line_color":"black","line_dash":[4,4],"line_width":2,"right_units":"screen","syncable":false,"top_units":"screen"},"id":"3166","type":"BoxAnnotation"},{"attributes":{"line_alpha":0.1,"line_color":"#1f77b4","line_width":2,"x":{"field":"x"},"y":{"field":"y_p"}},"id":"3184","type":"Line"},{"attributes":{},"id":"3210","type":"UnionRenderers"},{"attributes":{},"id":"3164","type":"ResetTool"},{"attributes":{"children":[{"id":"3228"},{"id":"3230"}]},"id":"3231","type":"Row"},{"attributes":{"source":{"id":"3176"}},"id":"3181","type":"CDSView"},{"attributes":{"children":[{"id":"3190"},{"id":"3188"},{"id":"3192"}]},"id":"3198","type":"Row"},{"attributes":{"children":[{"id":"3200"},{"id":"3232"},{"id":"3231"}]},"id":"3233","type":"Column"},{"attributes":{},"id":"3209","type":"Selection"},{"attributes":{"height":10},"id":"3232","type":"Spacer"},{"attributes":{"active_multi":null,"tools":[{"id":"3160"},{"id":"3161"},{"id":"3162"},{"id":"3163"},{"id":"3164"},{"id":"3165"}]},"id":"3167","type":"Toolbar"},{"attributes":{},"id":"3213","type":"UnionRenderers"},{"attributes":{},"id":"3165","type":"HelpTool"},{"attributes":{},"id":"3206","type":"BasicTickFormatter"},{"attributes":{},"id":"3148","type":"LinearScale"},{"attributes":{"js_property_callbacks":{"change:value":[{"id":"3195"}]},"value":"2","width":70},"id":"3192","type":"TextInput"},{"attributes":{},"id":"3163","type":"SaveTool"},{"attributes":{},"id":"3216","type":"BasicTickFormatter"},{"attributes":{"args":{"max_value":"Infinity","min_value":"0","slider":{"id":"3189"}},"code":"\\n    slider.start = Math.max(min_value, Number(cb_obj.value));\\n"},"id":"3196","type":"CustomJS"},{"attributes":{"axis_label":"PDF","formatter":{"id":"3206"},"major_label_policy":{"id":"3207"},"ticker":{"id":"3124"}},"id":"3123","type":"LinearAxis"},{"attributes":{"background_fill_alpha":0,"below":[{"id":"3152"}],"border_fill_alpha":0,"center":[{"id":"3155"},{"id":"3159"}],"frame_height":175,"frame_width":300,"left":[{"id":"3156"}],"renderers":[{"id":"3180"}],"title":{"id":"3142"},"toolbar":{"id":"3167"},"toolbar_location":null,"x_range":{"id":"3111"},"x_scale":{"id":"3148"},"y_range":{"id":"3174"},"y_scale":{"id":"3150"}},"id":"3141","subtype":"Figure","type":"Plot"},{"attributes":{},"id":"3207","type":"AllLabels"},{"attributes":{"js_property_callbacks":{"change:end":[{"id":"3187"}],"change:start":[{"id":"3187"}]},"range_padding":0},"id":"3111","type":"DataRange1d"},{"attributes":{"axis_label":"y","formatter":{"id":"3203"},"major_label_policy":{"id":"3204"},"ticker":{"id":"3120"}},"id":"3119","type":"LinearAxis"},{"attributes":{"active_multi":null,"tools":[{"id":"3127"},{"id":"3128"},{"id":"3129"},{"id":"3130"},{"id":"3131"},{"id":"3132"}]},"id":"3134","type":"Toolbar"},{"attributes":{},"id":"3117","type":"LinearScale"},{"attributes":{"text":"Inverse Gamma"},"id":"3109","type":"Title"},{"attributes":{},"id":"3127","type":"PanTool"},{"attributes":{"args":{"max_value":"Infinity","min_value":"0","slider":{"id":"3189"}},"code":"\\nslider.end = Math.min(max_value, Number(cb_obj.value));\\n"},"id":"3197","type":"CustomJS"},{"attributes":{"end":1.05,"start":-0.05},"id":"3174","type":"Range1d"},{"attributes":{"end":2,"js_property_callbacks":{"change:value":[{"id":"3187"}]},"start":0.01,"step":0.01,"title":"\\u03b1","value":0.5},"id":"3188","type":"Slider"},{"attributes":{},"id":"3220","type":"AllLabels"},{"attributes":{"args":{"max_value":"Infinity","min_value":"0","slider":{"id":"3188"}},"code":"\\n    slider.start = Math.max(min_value, Number(cb_obj.value));\\n"},"id":"3194","type":"CustomJS"},{"attributes":{"args":{"max_value":"Infinity","min_value":"0","slider":{"id":"3188"}},"code":"\\nslider.end = Math.min(max_value, Number(cb_obj.value));\\n"},"id":"3195","type":"CustomJS"},{"attributes":{"overlay":{"id":"3166"}},"id":"3162","type":"BoxZoomTool"},{"attributes":{"children":[[{"id":"3108"},0,0],[{"id":"3201"},0,1],[{"id":"3141"},0,2]]},"id":"3228","type":"GridBox"},{"attributes":{"width":30},"id":"3201","type":"Spacer"},{"attributes":{"source":{"id":"3175"}},"id":"3186","type":"CDSView"},{"attributes":{},"id":"3161","type":"WheelZoomTool"},{"attributes":{"end":2,"js_property_callbacks":{"change:value":[{"id":"3187"}]},"start":0.1,"step":0.01,"title":"\\u03b2","value":1},"id":"3189","type":"Slider"},{"attributes":{"line_color":"#1f77b4","line_width":2,"x":{"field":"x"},"y":{"field":"y_p"}},"id":"3183","type":"Line"},{"attributes":{},"id":"3204","type":"AllLabels"},{"attributes":{"toolbars":[{"id":"3134"},{"id":"3167"}],"tools":[{"id":"3127"},{"id":"3128"},{"id":"3129"},{"id":"3130"},{"id":"3131"},{"id":"3132"},{"id":"3160"},{"id":"3161"},{"id":"3162"},{"id":"3163"},{"id":"3164"},{"id":"3165"}]},"id":"3229","type":"ProxyToolbar"},{"attributes":{"toolbar":{"id":"3229"}},"id":"3230","type":"ToolbarBox"},{"attributes":{"text":" "},"id":"3142","type":"Title"},{"attributes":{},"id":"3219","type":"BasicTickFormatter"},{"attributes":{},"id":"3157","type":"BasicTicker"},{"attributes":{},"id":"3203","type":"BasicTickFormatter"},{"attributes":{"data_source":{"id":"3175"},"glyph":{"id":"3183"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"3184"},"view":{"id":"3186"}},"id":"3185","type":"GlyphRenderer"},{"attributes":{"args":{"arg1":{"id":"3188"},"arg2":{"id":"3189"},"arg3":{"id":"3188"},"discrete":false,"dist":"inverse_gamma","n":400,"source_c":{"id":"3176"},"source_p":{"id":"3175"},"xrange":{"id":"3111"}},"code":"function linspace(start, stop, n) {\\n\\tvar x = [];\\n\\tvar currValue = start;\\n\\tvar step = (stop - start) / (n - 1);\\n\\tfor (var i = 0; i &lt; n; i++) {\\n\\t\\tx.push(currValue);\\n\\t\\tcurrValue += step;\\n\\t}\\n\\treturn x;\\n}\\n\\nfunction update_y_p(probFun, x_p, arg1, arg2, arg3) {\\n    // Compute PMF/PDF\\n    var y_p = [];\\n    for (var i = 0; i &lt; x_p.length; i++) {\\n      y_p.push(probFun(x_p[i], arg1, arg2, arg3));\\n    }\\n\\n    return y_p;\\n}\\n\\nfunction update_y_c_continuous(cdfFun, x_c, arg1, arg2, arg3) {\\n    var y_c = [];\\n    for (var i = 0; i &lt; x_c.length; i ++)\\n        y_c.push(cdfFun(x_c[i], arg1, arg2, arg3));\\n\\n    return y_c;\\n}\\n\\nfunction lngamma(z) {\\n    // Compute log of the Gamma function using Lanczos approx.,\\n    // see https://en.wikipedia.org/wiki/Lanczos_approximation.\\n\\n    if(z &lt; 0) return Number(&#x27;0/0&#x27;);\\n\\n    if (z &lt; 0.5) return Math.log(Math.PI) - Math.log(Math.sin(Math.PI * z)) - lngamma(1-z);\\n\\n    var p = [676.5203681218851,\\n             -1259.1392167224028,\\n             771.32342877765313,\\n             -176.61502916214059,\\n             12.507343278686905,\\n             -0.13857109526572012,\\n             9.9843695780195716e-6,\\n             1.5056327351493116e-7];\\n\\n    z -= 1.0;\\n    var Ag = 0.99999999999980993;\\n    for (var i = 0; i &lt; p.length; i++) {\\n        Ag += p[i] / (z + i + 1);\\n    }\\n    var t = z + p.length - 0.5;\\n\\n    return 0.5 * Math.log(2*Math.PI) + (z + 0.5)*Math.log(t) - t + Math.log(Ag);\\n}\\n\\n\\n\\nfunction gammainc_u(x, s, regularized) {\\n    // Adapted from Compute.io package\\n    var EPSILON = 1e-12;\\n\\n    if (x &lt;= 1.1 || x &lt;= s) {\\n        if (regularized !== false) {\\n            return 1 - gammainc_l(x, s, regularized);\\n        } else {\\n            return Math.exp(lngamma(s)) - gammainc_l(x, s, regularized);\\n        }\\n    }\\n\\n    var f = 1 + x - s,\\n        C = f,\\n        D = 0,\\n        i = 1,\\n        a, b, chg;\\n    for (i = 1; i &lt; 10000; i++) {\\n        a = i * (s - i);\\n        b = (i&lt;&lt;1) + 1 + x - s;\\n        D = b + a * D;\\n        C = b + a / C;\\n        D = 1 / D;\\n        chg = C * D;\\n        f *= chg;\\n        if (Math.abs(chg - 1) &lt; EPSILON) {\\n            break;\\n        }\\n    }\\n    if (regularized !== false) {\\n        return Math.exp(s * Math.log(x) - x - lngamma(s) - Math.log(f));\\n    } else {\\n        return Math.exp(s * Math.log(x) - x - Math.log(f));\\n    }\\n}\\n\\n\\n\\nfunction gammainc_l(x, s, regularized) {\\n    // Adapted from Compute.io package\\n    var EPSILON = 1e-12;\\n\\n    if (x === 0) {\\n        return 0;\\n    }\\n    if (x &lt; 0 || s &lt;= 0) {\\n        return NaN;\\n    }\\n\\n    if(x &gt; 1.1 &amp;&amp; x &gt; s) {\\n        if (regularized !== false) {\\n            return 1 - gammainc_u(x, s, regularized);\\n        } else {\\n            return Math.exp(lngamma(s)) - gammainc_u(x, s, regularized);\\n        }\\n    }\\n\\n    var ft,\\n        r = s,\\n        c = 1,\\n        pws = 1;\\n\\n    if (regularized !== false) {\\n        ft = s * Math.log(x) - x - lngamma(s);\\n    } else {\\n        ft = s * Math.log(x) - x;\\n    }\\n    ft = Math.exp(ft);\\n    do {\\n        r += 1;\\n        c *= x/r;\\n        pws += c;\\n    } while (c / pws &gt; EPSILON);\\n    return pws*ft/s;\\n}\\n\\n\\n\\nfunction probFun(x, alpha, beta, {}) {\\n    if (x &lt; 0) return NaN;\\n\\n    var ln_prob;\\n\\n    ln_prob = alpha * Math.log(beta) - (alpha + 1) * Math.log(x) - beta / x - lngamma(alpha);\\n\\n    return Math.exp(ln_prob);\\n}\\n\\nfunction cdfFun(x, alpha, beta, {}) {\\n    if (x &lt; 0) return 0.0;\\n\\n    return gammainc_u(beta/x, alpha, true);\\n}\\n\\n// Extract data from sources\\nvar data_p = source_p.data;\\nvar data_c = source_c.data;\\nvar x_p = data_p[&#x27;x&#x27;];\\nvar y_p = data_p[&#x27;y_p&#x27;];\\nvar x_c = data_c[&#x27;x&#x27;];\\nvar y_c = data_c[&#x27;y_c&#x27;];\\nvar xRangeMin = xrange.start;\\nvar xRangeMax = xrange.end;\\n\\n// Make corrections for start and end points based on support\\n// We&#x27;re not doing this now because we want to allow zooming\\n// JS codes now make anything outside of support NaN.\\n// if (dist == &#x27;lognormal&#x27; \\n//     || dist == &#x27;gamma&#x27; \\n//     || dist == &#x27;exponential&#x27; \\n//     || dist == &#x27;inv_gamma&#x27;\\n//     || dist == &#x27;weibull&#x27;) {\\n// \\txRangeMin = 0.0;\\n// }\\n// else if (dist == &#x27;beta&#x27;) { \\n//     xRangeMin = 0.0;\\n//     xRangeMax = 1.0;\\n// }\\n\\n// x-values to evaluate PDF and CDF\\nx_p = linspace(xRangeMin, xRangeMax, n);\\nx_c = x_p;\\n\\n// Update sources with new x-values\\nsource_p.data[&#x27;x&#x27;] = x_p;\\nsource_c.data[&#x27;x&#x27;] = x_c;\\n\\n// Update the PDF and CDF\\nsource_p.data[&#x27;y_p&#x27;] = update_y_p(probFun, \\n    x_p, arg1.value, arg2.value, arg3.value);\\nsource_c.data[&#x27;y_c&#x27;] = update_y_c_continuous(cdfFun, \\n    x_c, arg1.value, arg2.value, arg3.value);\\n\\nsource_p.change.emit();\\nsource_c.change.emit();\\n"},"id":"3187","type":"CustomJS"},{"attributes":{},"id":"3150","type":"LinearScale"}],"root_ids":["3233"]},"title":"Bokeh Application","version":"2.3.3"}}';
                  var render_items = [{"docid":"fd5a51a9-05f3-4427-8c09-e713b1a128ec","root_ids":["3233"],"roots":{"3233":"631e4b6a-edef-4a24-a42e-c407db600ec5"}}];
                  root.Bokeh.embed.embed_items(docs_json, render_items);
                
                  }
                  if (root.Bokeh !== undefined) {
                    embed_document(root);
                  } else {
                    var attempts = 0;
                    var timer = setInterval(function(root) {
                      if (root.Bokeh !== undefined) {
                        clearInterval(timer);
                        embed_document(root);
                      } else {
                        attempts++;
                        if (attempts > 100) {
                          clearInterval(timer);
                          console.log("Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing");
                        }
                      }
                    }, 10, root)
                  }
                })(window);
              });
            };
            if (document.readyState != "loading") fn();
            else document.addEventListener("DOMContentLoaded", fn);
          })();
        },
        function(Bokeh) {
        
        
        }
      ];
    
      function run_inline_js() {
        
        for (var i = 0; i < inline_js.length; i++) {
          inline_js[i].call(root, root.Bokeh);
        }
        
      }
    
      if (root._bokeh_is_loading === 0) {
        console.debug("Bokeh: BokehJS loaded, going straight to plotting");
        run_inline_js();
      } else {
        load_libs(css_urls, js_urls, function() {
          console.debug("Bokeh: BokehJS plotting callback run at", now());
          run_inline_js();
        });
      }
    }(window));
  };
  if (document.readyState != "loading") fn();
  else document.addEventListener("DOMContentLoaded", fn);
})();