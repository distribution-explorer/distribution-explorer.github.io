(function() {
  const fn = function() {
    (function(root) {
      function now() {
        return new Date();
      }
    
      const force = false;
    
      if (typeof root._bokeh_onload_callbacks === "undefined" || force === true) {
        root._bokeh_onload_callbacks = [];
        root._bokeh_is_loading = undefined;
      }
    
    
    const element = document.getElementById("ad63c18b-43cf-4ff1-89d9-494143ffaa9b");
        if (element == null) {
          console.warn("Bokeh: autoload.js configured with elementid 'ad63c18b-43cf-4ff1-89d9-494143ffaa9b' but no matching script tag was found.")
        }
      function run_callbacks() {
        try {
          root._bokeh_onload_callbacks.forEach(function(callback) {
            if (callback != null)
              callback();
          });
        } finally {
          delete root._bokeh_onload_callbacks
        }
        console.debug("Bokeh: all callbacks have finished");
      }
    
      function load_libs(css_urls, js_urls, callback) {
        if (css_urls == null) css_urls = [];
        if (js_urls == null) js_urls = [];
    
        root._bokeh_onload_callbacks.push(callback);
        if (root._bokeh_is_loading > 0) {
          console.debug("Bokeh: BokehJS is being loaded, scheduling callback at", now());
          return null;
        }
        if (js_urls == null || js_urls.length === 0) {
          run_callbacks();
          return null;
        }
        console.debug("Bokeh: BokehJS not loaded, scheduling load and callback at", now());
        root._bokeh_is_loading = css_urls.length + js_urls.length;
    
        function on_load() {
          root._bokeh_is_loading--;
          if (root._bokeh_is_loading === 0) {
            console.debug("Bokeh: all BokehJS libraries/stylesheets loaded");
            run_callbacks()
          }
        }
    
        function on_error(url) {
          console.error("failed to load " + url);
        }
    
        for (let i = 0; i < css_urls.length; i++) {
          const url = css_urls[i];
          const element = document.createElement("link");
          element.onload = on_load;
          element.onerror = on_error.bind(null, url);
          element.rel = "stylesheet";
          element.type = "text/css";
          element.href = url;
          console.debug("Bokeh: injecting link tag for BokehJS stylesheet: ", url);
          document.body.appendChild(element);
        }
    
        for (let i = 0; i < js_urls.length; i++) {
          const url = js_urls[i];
          const element = document.createElement('script');
          element.onload = on_load;
          element.onerror = on_error.bind(null, url);
          element.async = false;
          element.src = url;
          console.debug("Bokeh: injecting script tag for BokehJS library: ", url);
          document.head.appendChild(element);
        }
      };
    
      function inject_raw_css(css) {
        const element = document.createElement("style");
        element.appendChild(document.createTextNode(css));
        document.body.appendChild(element);
      }
    
      const js_urls = ["https://cdn.bokeh.org/bokeh/release/bokeh-3.3.0.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-gl-3.3.0.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-3.3.0.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-3.3.0.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-mathjax-3.3.0.min.js"];
      const css_urls = [];
    
      const inline_js = [    function(Bokeh) {
          Bokeh.set_log_level("info");
        },
        function(Bokeh) {
          (function() {
            const fn = function() {
              Bokeh.safely(function() {
                (function(root) {
                  function embed_document(root) {
                  const docs_json = '{"d2d18702-cdc3-4069-8a2f-8b96de80fbb9":{"version":"3.3.0","title":"Bokeh Application","roots":[{"type":"object","name":"Column","id":"p4312","attributes":{"children":[{"type":"object","name":"Spacer","id":"p4310","attributes":{"height":10}},{"type":"object","name":"Column","id":"p4304","attributes":{"children":[{"type":"object","name":"Row","id":"p4301","attributes":{"children":[{"type":"object","name":"Column","id":"p4290","attributes":{"children":[{"type":"object","name":"Spacer","id":"p4289","attributes":{"height":4}},{"type":"object","name":"TextInput","id":"p4266","attributes":{"js_property_callbacks":{"type":"map","entries":[["change:value",[{"type":"object","name":"CustomJS","id":"p4280","attributes":{"args":{"type":"map","entries":[["minValue",0],["maxValue",1],["slider",{"type":"object","name":"Slider","id":"p4261","attributes":{"js_property_callbacks":{"type":"map","entries":[["change:value",[{"type":"object","name":"CustomJS","id":"p4275","attributes":{"args":{"type":"map","entries":[["p_p",{"type":"object","name":"Figure","id":"p4176","attributes":{"x_range":{"type":"object","name":"Range1d","id":"p4222","attributes":{"js_property_callbacks":{"type":"map","entries":[["change:start",[{"type":"object","name":"CustomJS","id":"p4276","attributes":{"args":{"type":"map","entries":[["p_p",{"id":"p4176"}],["p_c",{"type":"object","name":"Figure","id":"p4199","attributes":{"x_range":{"id":"p4222"},"y_range":{"type":"object","name":"Range1d","id":"p4226","attributes":{"start":-0.04,"end":1.04}},"x_scale":{"type":"object","name":"LinearScale","id":"p4209"},"y_scale":{"type":"object","name":"LinearScale","id":"p4210"},"title":{"type":"object","name":"Title","id":"p4202","attributes":{"text":" "}},"renderers":[{"type":"object","name":"GlyphRenderer","id":"p4239","attributes":{"data_source":{"type":"object","name":"ColumnDataSource","id":"p4230","attributes":{"selected":{"type":"object","name":"Selection","id":"p4231","attributes":{"indices":[],"line_indices":[]}},"selection_policy":{"type":"object","name":"UnionRenderers","id":"p4232"},"data":{"type":"map","entries":[["x",{"type":"ndarray","array":{"type":"bytes","data":"AAAAAAAA0L8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA8D8AAAAAAADwPwAAAAAAAABAAAAAAAAAAEAAAAAAAAAIQAAAAAAAAAhAAAAAAAAAEEAAAAAAAAAQQAAAAAAAABRAAAAAAAAAFEAAAAAAAAAVQA=="},"shape":[14],"dtype":"float64","order":"little"}],["y_c",{"type":"ndarray","array":{"type":"bytes","data":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACamZmZmZnJP5qZmZmZmck/AAAAAAAA4D8AAAAAAADgPzMzMzMzM+M/MzMzMzMz4z8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D8AAAAAAADwPw=="},"shape":[14],"dtype":"float64","order":"little"}]]}}},"view":{"type":"object","name":"CDSView","id":"p4240","attributes":{"filter":{"type":"object","name":"AllIndices","id":"p4241"}}},"glyph":{"type":"object","name":"Line","id":"p4236","attributes":{"x":{"type":"field","field":"x"},"y":{"type":"field","field":"y_c"},"line_color":"#1f77b4","line_width":2}},"nonselection_glyph":{"type":"object","name":"Line","id":"p4237","attributes":{"x":{"type":"field","field":"x"},"y":{"type":"field","field":"y_c"},"line_color":"#1f77b4","line_alpha":0.1,"line_width":2}},"muted_glyph":{"type":"object","name":"Line","id":"p4238","attributes":{"x":{"type":"field","field":"x"},"y":{"type":"field","field":"y_c"},"line_color":"#1f77b4","line_alpha":0.2,"line_width":2}}}}],"toolbar":{"type":"object","name":"Toolbar","id":"p4208","attributes":{"tools":[{"type":"object","name":"SaveTool","id":"p4221"}]}},"toolbar_location":null,"left":[{"type":"object","name":"LinearAxis","id":"p4216","attributes":{"ticker":{"type":"object","name":"BasicTicker","id":"p4217","attributes":{"mantissas":[1,2,5]}},"formatter":{"type":"object","name":"BasicTickFormatter","id":"p4218"},"axis_label":"CDF","axis_label_text_font_style":"normal","major_label_policy":{"type":"object","name":"AllLabels","id":"p4219"}}}],"below":[{"type":"object","name":"LinearAxis","id":"p4211","attributes":{"ticker":{"type":"object","name":"FixedTicker","id":"p4225","attributes":{"ticks":[1,2,3,4],"minor_ticks":[]}},"formatter":{"type":"object","name":"BasicTickFormatter","id":"p4213"},"axis_label":"category","major_label_policy":{"type":"object","name":"AllLabels","id":"p4214"}}}],"center":[{"type":"object","name":"Grid","id":"p4215","attributes":{"axis":{"id":"p4211"}}},{"type":"object","name":"Grid","id":"p4220","attributes":{"dimension":1,"axis":{"id":"p4216"}}}],"frame_width":300,"frame_height":175,"background_fill_alpha":0,"border_fill_alpha":0}}],["source_p",{"type":"object","name":"ColumnDataSource","id":"p4227","attributes":{"selected":{"type":"object","name":"Selection","id":"p4228","attributes":{"indices":[],"line_indices":[]}},"selection_policy":{"type":"object","name":"UnionRenderers","id":"p4229"},"data":{"type":"map","entries":[["x",{"type":"ndarray","array":{"type":"bytes","data":"AAAAAAEAAAACAAAAAwAAAAQAAAAFAAAA"},"shape":[6],"dtype":"int32","order":"little"}],["y_p",{"type":"ndarray","array":{"type":"bytes","data":"AAAAAAAA+H+amZmZmZnJPzMzMzMzM9M/mpmZmZmZuT+amZmZmZnZPwAAAAAAAPh/"},"shape":[6],"dtype":"float64","order":"little"}]]}}}],["source_c",{"id":"p4230"}],["discrete",true],["n",400],["sliders",[{"id":"p4261"},{"type":"object","name":"Slider","id":"p4263","attributes":{"js_property_callbacks":{"type":"map","entries":[["change:value",[{"id":"p4275"}]]]},"width":200,"title":"\\u03b8\\u2082","format":{"type":"object","name":"CustomJSTickFormatter","id":"p4262","attributes":{"code":"return tick.toPrecision(4)"}},"start":0,"end":1,"value":0.3,"step":0.01}},{"type":"object","name":"Slider","id":"p4265","attributes":{"js_property_callbacks":{"type":"map","entries":[["change:value",[{"id":"p4275"}]]]},"width":200,"title":"\\u03b8\\u2083","format":{"type":"object","name":"CustomJSTickFormatter","id":"p4264","attributes":{"code":"return tick.toPrecision(4)"}},"start":0,"end":1,"value":0.1,"step":0.01}}]],["xBoxes",[]],["pBoxes",[]],["quantileSetterSwitch",{"type":"object","name":"Switch","id":"p4273","attributes":{"js_property_callbacks":{"type":"map","entries":[["change:active",[{"type":"object","name":"CustomJS","id":"p4277","attributes":{"args":{"type":"map","entries":[["p_p",{"id":"p4176"}],["p_c",{"id":"p4199"}],["source_p",{"id":"p4227"}],["source_c",{"id":"p4230"}],["discrete",true],["n",400],["sliders",[{"id":"p4261"},{"id":"p4263"},{"id":"p4265"}]],["xBoxes",[]],["pBoxes",[]],["quantileSetterSwitch",{"id":"p4273"}],["quantileSetterDiv",{"type":"object","name":"Div","id":"p4272"}],["triggerCallbacks",{"type":"object","name":"Switch","id":"p4274","attributes":{"active":true}}],["startBoxes",[{"id":"p4266"},{"type":"object","name":"TextInput","id":"p4267","attributes":{"js_property_callbacks":{"type":"map","entries":[["change:value",[{"type":"object","name":"CustomJS","id":"p4282","attributes":{"args":{"type":"map","entries":[["minValue",0],["maxValue",1],["slider",{"id":"p4263"}]]},"code":"\\n\\nslider.start = Math.max(minValue, Number(cb_obj.value));\\nslider.step = (slider.end - slider.start) / 1000;"}}]]]},"width":70,"value":"0"}},{"type":"object","name":"TextInput","id":"p4268","attributes":{"js_property_callbacks":{"type":"map","entries":[["change:value",[{"type":"object","name":"CustomJS","id":"p4284","attributes":{"args":{"type":"map","entries":[["minValue",0],["maxValue",1],["slider",{"id":"p4265"}]]},"code":"\\n\\nslider.start = Math.max(minValue, Number(cb_obj.value));\\nslider.step = (slider.end - slider.start) / 1000;"}}]]]},"width":70,"value":"0"}}]],["endBoxes",[{"type":"object","name":"TextInput","id":"p4269","attributes":{"js_property_callbacks":{"type":"map","entries":[["change:value",[{"type":"object","name":"CustomJS","id":"p4281","attributes":{"args":{"type":"map","entries":[["minValue",0],["maxValue",1],["slider",{"id":"p4261"}]]},"code":"\\n\\nslider.end = Math.min(maxValue, Number(cb_obj.value));\\nslider.step = (slider.end - slider.start) / 1000;"}}]]]},"width":70,"value":"1"}},{"type":"object","name":"TextInput","id":"p4270","attributes":{"js_property_callbacks":{"type":"map","entries":[["change:value",[{"type":"object","name":"CustomJS","id":"p4283","attributes":{"args":{"type":"map","entries":[["minValue",0],["maxValue",1],["slider",{"id":"p4263"}]]},"code":"\\n\\nslider.end = Math.min(maxValue, Number(cb_obj.value));\\nslider.step = (slider.end - slider.start) / 1000;"}}]]]},"width":70,"value":"1"}},{"type":"object","name":"TextInput","id":"p4271","attributes":{"js_property_callbacks":{"type":"map","entries":[["change:value",[{"type":"object","name":"CustomJS","id":"p4285","attributes":{"args":{"type":"map","entries":[["minValue",0],["maxValue",1],["slider",{"id":"p4265"}]]},"code":"\\n\\nslider.end = Math.min(maxValue, Number(cb_obj.value));\\nslider.step = (slider.end - slider.start) / 1000;"}}]]]},"width":70,"value":"1"}}]]]},"code":"\\nfunction updateData(source_p, source_c, p_p, sliders, discrete) {\\n  if (discrete) {\\n    updateDiscretePMFandCDF(source_p, source_c, p_p.x_range, sliders);\\n  }\\n  else {\\n    updateContinuousPDFandCDF(source_p, source_c, p_p.x_range, sliders);\\n  }\\n}\\n\\n\\nfunction updateQuantiles(quantileSetterSwitch, sliders, xBoxes, pBoxes) {\\n  if (!quantileSetterSwitch.active) {\\n    let params = paramsFromSliders(sliders);\\n\\n    for (let i = 0; i &lt; xBoxes.length; i++) {\\n      xBoxes[i].value = dist.ppfSingleValue(Number(pBoxes[i].value), params).toPrecision(4);\\n    }\\n  }\\n}\\n\\n\\nfunction quantileSetter(xBoxes, pBoxes, quantileSetterDiv, sliders, startBoxes, endBoxes, p_p, p_c, source_p) {\\n  \\n  triggerCallbacks.active = false;\\n\\n  \\n  let x = paramsFromBoxes(xBoxes);\\n  let p = paramsFromBoxes(pBoxes);\\n\\n  \\n  let params = paramsFromSliders(sliders);\\n\\n  \\n  let inputOk = checkQuantileInput(x, p, dist.hardMin, dist.hardMax, dist.varName, quantileSetterDiv);\\n\\n  if (inputOk) {\\n    \\n    let extraParams = [];\\n    for (let i = 0; i &lt; dist.paramNames.length; i++) {\\n      if (dist.fixedParamsInds.includes(i)) {\\n        extraParams.push(params[i]);\\n      }\\n    }\\n\\n    \\n    let errText = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Failed to find parameters to match quantiles.&lt;/p&gt;&#x27;;\\n\\n    \\n    let optimParams, optimSuccess;\\n    try {\\n      [optimParams, optimSuccess] = dist.quantileSet(x, p, extraParams);\\n    } catch(e) {\\n      optimSuccess = false;\\n      errText = &#x27;&lt;p style=\\"color:tomato;\\"&gt;&#x27; + e.message; + &#x27;&lt;/p&gt;&#x27;;\\n    }\\n\\n    let text;\\n    if (optimSuccess) {\\n      \\n      text = &#x27;&lt;p&gt;&#x27;;\\n      for (let i = 0; i &lt; optimParams.length - 1; i++) {\\n        text += dist.paramNames[dist.activeParamsInds[i]] + &#x27; = &#x27; + optimParams[i].toPrecision(4) + &#x27;, &#x27;;\\n      }\\n      let i = optimParams.length - 1;\\n      text += dist.paramNames[dist.activeParamsInds[i]] + &#x27; = &#x27; + optimParams[i].toPrecision(4) + &#x27;&lt;/p&gt;&#x27;;\\n    } else{\\n      text = errText;\\n    }\\n\\n    quantileSetterDiv.text = text;\\n\\n    if (optimSuccess) {\\n      \\n      for (let i = 0; i &lt; optimParams.length; i++ ){\\n        if (sliders[dist.activeParamsInds[i]].start &gt; optimParams[i] || sliders[dist.activeParamsInds[i]].end &lt; optimParams[i]) {\\n          startBoxes[dist.activeParamsInds[i]].value = (4 * optimParams[i] / 1001).toPrecision(4);\\n          endBoxes[dist.activeParamsInds[i]].value = (4 * optimParams[i]).toPrecision(4);        \\n        }\\n        sliders[dist.activeParamsInds[i]].value = optimParams[i];\\n      }\\n\\n      params = paramsFromSliders(sliders); \\n\\n      \\n      let [x1, x2] = dist.defaultXRange(params);\\n\\n      p_p.x_range.start = x1;\\n      p_p.x_range.end = x2;\\n\\n      \\n      updateData(source_p, source_c, p_p, sliders, discrete);\\n\\n      \\n      setYRanges(p_p, p_c, source_p);  \\n    }\\n  }\\n\\n  \\n  triggerCallbacks.active = true;  \\n}\\n\\n\\nfunction updateContinuousPDFandCDF(source_p, source_c, xRange, sliders) {\\n  \\n  let x_p = source_p.data[&#x27;x&#x27;];\\n  let y_p = source_p.data[&#x27;y_p&#x27;];\\n  let x_c = source_c.data[&#x27;x&#x27;];\\n  let y_c = source_c.data[&#x27;y_c&#x27;];\\n  let xRangeMin = xRange.start;\\n  let xRangeMax = xRange.end;\\n\\n  \\n  x_p = linspace(xRangeMin, xRangeMax, n);\\n  x_c = x_p;\\n\\n  \\n  source_p.data[&#x27;x&#x27;] = x_p;\\n  source_c.data[&#x27;x&#x27;] = x_c;\\n\\n  \\n  let params = paramsFromSliders(sliders);\\n\\n  \\n  let pdf = dist.pdf(x_p, params);\\n\\n  \\n  pdf = pdf.map(val =&gt; (val === Infinity || val === -Infinity) ? NaN : val);\\n\\n  \\n  source_p.data[&#x27;y_p&#x27;] = pdf;\\n  source_c.data[&#x27;y_c&#x27;] = dist.cdf(x_c, params);\\n\\n  source_p.change.emit();\\n  source_c.change.emit();\\n}\\n\\n\\nfunction updateDiscretePMFandCDF(source_p, source_c, xRange, sliders) {\\n  \\n  let xRangeMin = Math.floor(xRange.start);\\n  let xRangeMax = Math.ceil(xRange.end);\\n\\n  \\n  let x_p = arange(xRangeMin, xRangeMax + 1);\\n\\n  \\n  let x_c = [xRangeMin - 1, ...x_p.flatMap(x =&gt; [x, x]), xRangeMax + 1];\\n\\n  \\n  source_p.data[&#x27;x&#x27;] = x_p;\\n  source_c.data[&#x27;x&#x27;] = x_c;\\n\\n  \\n  let params = paramsFromSliders(sliders);\\n\\n  \\n  source_p.data[&#x27;y_p&#x27;] = dist.pmf(x_p, params);\\n  source_c.data[&#x27;y_c&#x27;] = dist.cdfForPlotting(x_c[0], x_c[x_c.length - 1], params);\\n\\n  source_p.change.emit();\\n  source_c.change.emit();\\n}\\n\\n\\nfunction linspace(start, stop, n) {\\n  let x = new Array(n);\\n  let step = (stop - start) / (n - 1);\\n  for (let i = 0; i &lt; n; i++) {\\n    x[i] = start + i * step;\\n  }\\n\\n  return x;\\n}\\n\\n\\nfunction paramsFromSliders(sliders) {\\n  let params = [];\\n  for (let slider of sliders) {\\n    params.push(slider.value);\\n  }\\n\\n  return params;\\n}\\n\\n\\nfunction arange(start, stop) {\\n  let x = new Array(stop - start);\\n  for (let i = 0; i &lt; stop - start; i++) {\\n    x[i] = start + i;\\n  }\\n\\n  return x;\\n}\\n\\n\\nfunction paramsFromBoxes(boxes) {\\n  let params = [];\\n  for (let box of boxes) {\\n    params.push(Number(box.value));\\n  }\\n\\n  return params;\\n}\\n\\n\\nfunction setYRanges(p_p, p_c, source_p) {\\n    p_c.y_range.start = -0.04;\\n    p_c.y_range.end = 1.04;        \\n\\n    let pdfMax = source_p.data[&#x27;y_p&#x27;];\\n    p_p.y_range.start = -pdfMax * 0.04;\\n    p_p.y_range.end = 1.04 * pdfMax;\\n}\\n\\n\\nfunction checkQuantileInput(x, p, xMin, xMax, varName, quantileSetterDiv) {\\n  for (let i = 0; i &lt; x.length; i++) {\\n    if (p[i] &lt;= 0 || p[i] &gt;= 1) {\\n      quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Must have 0 &lt; quantile &lt; 1.&lt;/p\\\\&gt;&#x27;;\\n      return false; \\n    }\\n\\n    if (x[i] &lt; xMin || x[i] &gt; xMax) {\\n      let qStr = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Must have &#x27; + xMin.toString() + &#x27; \\u2264 yy \\u2264&#x27; + xMax.toString() + &#x27;.&lt;/p\\\\&gt;&#x27;;\\n      quantileSetterDiv.text = qStr.replace(/yy/g, varName);\\n      return false;\\n    }\\n  }\\n\\n\\n  if (p.length === 2) {\\n    if (p[1] &lt;= 0 || p[1] &gt;= 1) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Must have 0 &lt; quantile &lt; 1.&lt;/p\\\\&gt;&#x27;;\\n        return false;\\n    }\\n\\n    if (p[0] &gt;= p[1]) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Lower quantile must be less than upper quantile.&lt;/p\\\\&gt;&#x27;;\\n        return false;\\n    }\\n\\n    if (x[0] &gt;= x[1]) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Lower yy must be less than upper yy.&lt;/p\\\\&gt;&#x27;.replace(/yy/g, varName);\\n        return false;        \\n    }\\n  }\\n\\n  if (p.length === 3) {\\n    if (p[2] &lt;= 0 || p[2] &gt;= 1 || p[1] &lt;= 0 || p[1] &gt;= 1) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Must have 0 &lt; quantile &lt; 1.&lt;/p\\\\&gt;&#x27;;\\n        return false;\\n    }\\n\\n    if (p[0] &gt;= p[1] || p[1] &gt;= p[2]) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Quantiles must be ordered lower, middle, upper.&lt;/p\\\\&gt;&#x27;;\\n        return false;\\n    }\\n\\n    if (x[0] &gt;= x[1] || x[1] &gt;= x[2]) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;yy values must be ordered, lower, middle, upper.&lt;/p\\\\&gt;&#x27;.replace(/yy/g, varName);\\n        return false;\\n    }\\n  }\\n\\n    return true;\\n}\\n\\n\\nclass UnivariateDistribution {\\n  constructor(parametrization) {\\n    \\n    this.name = &#x27;&#x27;;\\n\\n    \\n    this.varName = &#x27;&#x27;;\\n\\n    \\n    this.hardMin = 0;\\n    this.hardMax = Infinity;\\n\\n    \\n    this.p1Value = Infinity;\\n\\n    \\n    this.parametrization = parametrization\\n\\n    \\n    this.paramNames = [];\\n\\n    \\n    this.fixedParams = [];\\n\\n    \\n    this.epsilon = 1.0e-8\\n  }\\n\\n  generateActiveFixedInds() {\\n    \\n    this.activeParamsInds = [];\\n    this.fixedParamsInds = []\\n    for (let i = 0; i &lt; this.paramNames.length; i++) {\\n      if (this.fixedParams.includes(this.paramNames[i])) {\\n        this.fixedParamsInds.push(i);\\n      } else {\\n        this.activeParamsInds.push(i);\\n      }\\n    }\\n  }\\n\\n  xMin(params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  xMax(params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  cdfSingleValue({x, params, parametrization = this.parametrization}) {\\n    \\n  }\\n\\n  ppfSingleValue(p, params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  quantileSet(x, p, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  defaultXRange(params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n\\n  cdf(x, params, parametrization = this.parametrization) {\\n    params = this.scalarToArrayParams(params);\\n\\n    return this.scalarOrArrayCompute(\\n      (x, params) =&gt; this.cdfSingleValue(x, params, parametrization),\\n      x,\\n      params\\n    );\\n  }\\n\\n  ppfSingleValueWithCheck(p, params, parametrization = this.parametrization) {\\n    if (p &lt; 0 || p &gt; 1) return NaN;\\n    return this.ppfSingleValue(p, params, parametrization);\\n  }\\n\\n  ppf(p, params, parametrization = this.parametrization) {\\n    params = this.scalarToArrayParams(params);\\n\\n    return this.scalarOrArrayCompute(\\n      (p, params) =&gt; this.ppfSingleValueWithCheck(p, params, parametrization),\\n      p,\\n      params\\n    );\\n  }\\n\\n  resetXRange(params, p, parametrization = this.parametrization) {\\n    if (p === undefined) {\\n      return this.defaultXRange(params, parametrization);\\n    } else if (this.checkResetp(p)) {\\n      return this.ppf(p, params, parametrization);\\n    }\\n  }\\n\\n  scalarOrArrayCompute(func, x, params, parametrization = this.parametrization) {\\n    if (x instanceof Array) {\\n      let xLen = x.length;\\n\\n      let res = [];\\n      for (let i = 0; i &lt; xLen; i++) {\\n        res.push(func(x[i], params, parametrization));\\n      }\\n\\n      return res;\\n    } else {\\n      return func(x, params, parametrization);\\n    }\\n  }\\n\\n  scalarToArrayParams(params) {\\n    return params instanceof Array ? params : [params]\\n  }\\n}\\n\\nclass DiscreteUnivariateDistribution extends UnivariateDistribution {\\n  constructor(parametrization) {\\n    super(parametrization);\\n  }\\n\\n  pmfSingleValue(x, params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  pmf(x, params, parametrization = this.parametrization) {\\n    params = this.scalarToArrayParams(params);\\n\\n    return this.scalarOrArrayCompute(\\n      (x, params) =&gt; this.pmfSingleValue(x, params, parametrization),\\n      x,\\n      params);\\n  }\\n\\n  cdfSingleValue(x, params, parametrization = this.parametrization) {\\n    params = this.scalarToArrayParams(params);\\n\\n    \\n    let cumsum = 0.0;\\n    let summand = 0.0;\\n    for (let n = this.xMin(params, parametrization); n &lt;= x; n++) {\\n        summand = this.pmfSingleValue(n, params, parametrization);\\n        if (!isNaN(summand)) cumsum += summand;\\n    }\\n\\n    return cumsum;\\n  }\\n\\n  cdfForPlotting(xStart, xEnd, params, parametrization = this.parametrization) {\\n\\n    params = this.scalarToArrayParams(params);\\n\\n    \\n    let cumsum = 0.0;\\n    let prob;\\n    for (let x = this.xMin(params, parametrization); x &lt; xStart; x++) {\\n      prob = this.pmfSingleValue(x, params, parametrization);\\n      if (!isNaN(prob)) cumsum += prob;\\n    }\\n\\n    \\n    let yCDF = [];\\n    for (let x = xStart; x &lt; xEnd; x++) {\\n      prob = this.pmfSingleValue(x, params, parametrization);\\n      if (!isNaN(prob)) cumsum += prob;\\n      yCDF.push(cumsum, cumsum);\\n    }\\n\\n    return yCDF;\\n  }\\n\\n  ppfSingleValue(p, params, parametrization = this.parametrization) {\\n    if (p &lt; 0 || p &gt; 1) throw new Error(&#x27;p must be between 0 and 1.&#x27;)\\n\\n    \\n    if (p == 0) return xMin(params, parametrization);\\n\\n    \\n    if (p == 1) return xMax(params, parametrization);\\n\\n    params = this.scalarToArrayParams(params);\\n\\n    \\n    let n = this.xMin(params, parametrization);\\n    let cumsum = this.pmfSingleValue(n, params, parametrization);\\n\\n    let iters = 0;\\n    let summand = 0.0;\\n    let xMaxForTheseParams = this.xMax(params, parametrization);\\n    while (cumsum &lt; p &amp;&amp; !isclose(cumsum, p) &amp;&amp; !isNaN(summand) &amp;&amp; n &lt; xMaxForTheseParams) {\\n      n += 1;\\n      summand = this.pmfSingleValue(n, params, parametrization);\\n\\n      if (!isNaN(summand)) cumsum += summand;\\n\\n      iters += 1;\\n    }\\n\\n    return n;\\n  }\\n\\n}\\n\\nfunction isclose(x, y, rtol = 1.0e-7, atol = 1.0e-8) {\\n  return Math.abs(x - y) &lt;= (atol + rtol * Math.abs(y));\\n}\\n\\n\\nclass CategoricalDistribution extends DiscreteUnivariateDistribution {\\n  constructor() {\\n    super();\\n\\n    \\n    this.name = &#x27;Categorical&#x27;;\\n\\n    \\n    this.varName = &#x27;y&#x27;;\\n\\n    \\n    this.hardMin = 1;\\n    this.hardMax = 4;\\n\\n    \\n    this.paramNames = [&#x27;\\u03b81&#x27;, &#x27;\\u03b82&#x27;, &#x27;\\u03b83&#x27;];\\n\\n    \\n    this.fixedParams = [];\\n\\n    \\n    super.generateActiveFixedInds()\\n  }\\n\\n  xMin(params) {\\n    return 1;\\n  }\\n\\n  xMax(params) {\\n    return 4;\\n  }\\n\\n  pmfSingleValue(cat, params) {\\n    let [theta1, theta2, theta3] = params.slice(0, 3);\\n    let theta4 = 1 - theta1 - theta2 - theta3\\n\\n    \\n    if (theta4 &lt; 0) return NaN;\\n\\n    \\n    if (![1, 2, 3, 4].includes(cat)) return NaN;\\n\\n    let probs = [theta1, theta2, theta3, theta4]\\n\\n    return probs[cat-1];\\n  }\\n\\n  defaultXRange(params) {\\n    return [-0.25, 4.25];\\n  }\\n\\n  cdfSingleValue(x, params, xMin = 0) {\\n    \\n    let [theta1, theta2, theta3] = params.slice(0, 3);\\n    let theta4 = 1 - theta1 - theta2 - theta3\\n\\n    \\n    if (theta4 &lt; 0) return NaN;\\n\\n    \\n    let cumsum = 0.0;\\n    let summand = 0.0;\\n    for (let n = xMin; n &lt;= x; n++) {\\n        summand = this.pmfSingleValue(n, params);\\n        if (!isNaN(summand)) cumsum += summand;\\n    }\\n\\n    return cumsum;\\n  }\\n}\\n\\n\\n\\nvar dist = new CategoricalDistribution();\\n\\n\\n\\nif (cb_obj.active) {\\n  for (let i = 0; i &lt; sliders.length; i++) {\\n    if (!dist.fixedParamsInds.includes(i)) {\\n      sliders[i].title = dist.paramNames[i] + &#x27; (computed)&#x27;;\\n      sliders[i].disabled = true;\\n    }\\n  }\\n  for (let xBox of xBoxes) {\\n    xBox.disabled = false;\\n  }\\n  for (let pBox of pBoxes) {\\n    pBox.disabled = false;\\n  }\\n} else {\\n  for (let i = 0; i &lt; sliders.length; i++) {\\n    if (!dist.fixedParamsInds.includes(i)) {\\n      sliders[i].title = dist.paramNames[i];\\n      sliders[i].disabled = false;\\n    }\\n  }\\n  for (let xBox of xBoxes) {\\n    xBox.disabled = true;\\n  }\\n  for (let pBox of pBoxes) {\\n    pBox.disabled = true;\\n  }\\n  quantileSetterDiv.text = &#x27;&#x27;;\\n}"}}]]]}}}],["quantileSetterDiv",{"id":"p4272"}],["triggerCallbacks",{"id":"p4274"}],["startBoxes",[{"id":"p4266"},{"id":"p4267"},{"id":"p4268"}]],["endBoxes",[{"id":"p4269"},{"id":"p4270"},{"id":"p4271"}]]]},"code":"\\nfunction updateData(source_p, source_c, p_p, sliders, discrete) {\\n  if (discrete) {\\n    updateDiscretePMFandCDF(source_p, source_c, p_p.x_range, sliders);\\n  }\\n  else {\\n    updateContinuousPDFandCDF(source_p, source_c, p_p.x_range, sliders);\\n  }\\n}\\n\\n\\nfunction updateQuantiles(quantileSetterSwitch, sliders, xBoxes, pBoxes) {\\n  if (!quantileSetterSwitch.active) {\\n    let params = paramsFromSliders(sliders);\\n\\n    for (let i = 0; i &lt; xBoxes.length; i++) {\\n      xBoxes[i].value = dist.ppfSingleValue(Number(pBoxes[i].value), params).toPrecision(4);\\n    }\\n  }\\n}\\n\\n\\nfunction quantileSetter(xBoxes, pBoxes, quantileSetterDiv, sliders, startBoxes, endBoxes, p_p, p_c, source_p) {\\n  \\n  triggerCallbacks.active = false;\\n\\n  \\n  let x = paramsFromBoxes(xBoxes);\\n  let p = paramsFromBoxes(pBoxes);\\n\\n  \\n  let params = paramsFromSliders(sliders);\\n\\n  \\n  let inputOk = checkQuantileInput(x, p, dist.hardMin, dist.hardMax, dist.varName, quantileSetterDiv);\\n\\n  if (inputOk) {\\n    \\n    let extraParams = [];\\n    for (let i = 0; i &lt; dist.paramNames.length; i++) {\\n      if (dist.fixedParamsInds.includes(i)) {\\n        extraParams.push(params[i]);\\n      }\\n    }\\n\\n    \\n    let errText = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Failed to find parameters to match quantiles.&lt;/p&gt;&#x27;;\\n\\n    \\n    let optimParams, optimSuccess;\\n    try {\\n      [optimParams, optimSuccess] = dist.quantileSet(x, p, extraParams);\\n    } catch(e) {\\n      optimSuccess = false;\\n      errText = &#x27;&lt;p style=\\"color:tomato;\\"&gt;&#x27; + e.message; + &#x27;&lt;/p&gt;&#x27;;\\n    }\\n\\n    let text;\\n    if (optimSuccess) {\\n      \\n      text = &#x27;&lt;p&gt;&#x27;;\\n      for (let i = 0; i &lt; optimParams.length - 1; i++) {\\n        text += dist.paramNames[dist.activeParamsInds[i]] + &#x27; = &#x27; + optimParams[i].toPrecision(4) + &#x27;, &#x27;;\\n      }\\n      let i = optimParams.length - 1;\\n      text += dist.paramNames[dist.activeParamsInds[i]] + &#x27; = &#x27; + optimParams[i].toPrecision(4) + &#x27;&lt;/p&gt;&#x27;;\\n    } else{\\n      text = errText;\\n    }\\n\\n    quantileSetterDiv.text = text;\\n\\n    if (optimSuccess) {\\n      \\n      for (let i = 0; i &lt; optimParams.length; i++ ){\\n        if (sliders[dist.activeParamsInds[i]].start &gt; optimParams[i] || sliders[dist.activeParamsInds[i]].end &lt; optimParams[i]) {\\n          startBoxes[dist.activeParamsInds[i]].value = (4 * optimParams[i] / 1001).toPrecision(4);\\n          endBoxes[dist.activeParamsInds[i]].value = (4 * optimParams[i]).toPrecision(4);        \\n        }\\n        sliders[dist.activeParamsInds[i]].value = optimParams[i];\\n      }\\n\\n      params = paramsFromSliders(sliders); \\n\\n      \\n      let [x1, x2] = dist.defaultXRange(params);\\n\\n      p_p.x_range.start = x1;\\n      p_p.x_range.end = x2;\\n\\n      \\n      updateData(source_p, source_c, p_p, sliders, discrete);\\n\\n      \\n      setYRanges(p_p, p_c, source_p);  \\n    }\\n  }\\n\\n  \\n  triggerCallbacks.active = true;  \\n}\\n\\n\\nfunction updateContinuousPDFandCDF(source_p, source_c, xRange, sliders) {\\n  \\n  let x_p = source_p.data[&#x27;x&#x27;];\\n  let y_p = source_p.data[&#x27;y_p&#x27;];\\n  let x_c = source_c.data[&#x27;x&#x27;];\\n  let y_c = source_c.data[&#x27;y_c&#x27;];\\n  let xRangeMin = xRange.start;\\n  let xRangeMax = xRange.end;\\n\\n  \\n  x_p = linspace(xRangeMin, xRangeMax, n);\\n  x_c = x_p;\\n\\n  \\n  source_p.data[&#x27;x&#x27;] = x_p;\\n  source_c.data[&#x27;x&#x27;] = x_c;\\n\\n  \\n  let params = paramsFromSliders(sliders);\\n\\n  \\n  let pdf = dist.pdf(x_p, params);\\n\\n  \\n  pdf = pdf.map(val =&gt; (val === Infinity || val === -Infinity) ? NaN : val);\\n\\n  \\n  source_p.data[&#x27;y_p&#x27;] = pdf;\\n  source_c.data[&#x27;y_c&#x27;] = dist.cdf(x_c, params);\\n\\n  source_p.change.emit();\\n  source_c.change.emit();\\n}\\n\\n\\nfunction updateDiscretePMFandCDF(source_p, source_c, xRange, sliders) {\\n  \\n  let xRangeMin = Math.floor(xRange.start);\\n  let xRangeMax = Math.ceil(xRange.end);\\n\\n  \\n  let x_p = arange(xRangeMin, xRangeMax + 1);\\n\\n  \\n  let x_c = [xRangeMin - 1, ...x_p.flatMap(x =&gt; [x, x]), xRangeMax + 1];\\n\\n  \\n  source_p.data[&#x27;x&#x27;] = x_p;\\n  source_c.data[&#x27;x&#x27;] = x_c;\\n\\n  \\n  let params = paramsFromSliders(sliders);\\n\\n  \\n  source_p.data[&#x27;y_p&#x27;] = dist.pmf(x_p, params);\\n  source_c.data[&#x27;y_c&#x27;] = dist.cdfForPlotting(x_c[0], x_c[x_c.length - 1], params);\\n\\n  source_p.change.emit();\\n  source_c.change.emit();\\n}\\n\\n\\nfunction linspace(start, stop, n) {\\n  let x = new Array(n);\\n  let step = (stop - start) / (n - 1);\\n  for (let i = 0; i &lt; n; i++) {\\n    x[i] = start + i * step;\\n  }\\n\\n  return x;\\n}\\n\\n\\nfunction paramsFromSliders(sliders) {\\n  let params = [];\\n  for (let slider of sliders) {\\n    params.push(slider.value);\\n  }\\n\\n  return params;\\n}\\n\\n\\nfunction arange(start, stop) {\\n  let x = new Array(stop - start);\\n  for (let i = 0; i &lt; stop - start; i++) {\\n    x[i] = start + i;\\n  }\\n\\n  return x;\\n}\\n\\n\\nfunction paramsFromBoxes(boxes) {\\n  let params = [];\\n  for (let box of boxes) {\\n    params.push(Number(box.value));\\n  }\\n\\n  return params;\\n}\\n\\n\\nfunction setYRanges(p_p, p_c, source_p) {\\n    p_c.y_range.start = -0.04;\\n    p_c.y_range.end = 1.04;        \\n\\n    let pdfMax = source_p.data[&#x27;y_p&#x27;];\\n    p_p.y_range.start = -pdfMax * 0.04;\\n    p_p.y_range.end = 1.04 * pdfMax;\\n}\\n\\n\\nfunction checkQuantileInput(x, p, xMin, xMax, varName, quantileSetterDiv) {\\n  for (let i = 0; i &lt; x.length; i++) {\\n    if (p[i] &lt;= 0 || p[i] &gt;= 1) {\\n      quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Must have 0 &lt; quantile &lt; 1.&lt;/p\\\\&gt;&#x27;;\\n      return false; \\n    }\\n\\n    if (x[i] &lt; xMin || x[i] &gt; xMax) {\\n      let qStr = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Must have &#x27; + xMin.toString() + &#x27; \\u2264 yy \\u2264&#x27; + xMax.toString() + &#x27;.&lt;/p\\\\&gt;&#x27;;\\n      quantileSetterDiv.text = qStr.replace(/yy/g, varName);\\n      return false;\\n    }\\n  }\\n\\n\\n  if (p.length === 2) {\\n    if (p[1] &lt;= 0 || p[1] &gt;= 1) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Must have 0 &lt; quantile &lt; 1.&lt;/p\\\\&gt;&#x27;;\\n        return false;\\n    }\\n\\n    if (p[0] &gt;= p[1]) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Lower quantile must be less than upper quantile.&lt;/p\\\\&gt;&#x27;;\\n        return false;\\n    }\\n\\n    if (x[0] &gt;= x[1]) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Lower yy must be less than upper yy.&lt;/p\\\\&gt;&#x27;.replace(/yy/g, varName);\\n        return false;        \\n    }\\n  }\\n\\n  if (p.length === 3) {\\n    if (p[2] &lt;= 0 || p[2] &gt;= 1 || p[1] &lt;= 0 || p[1] &gt;= 1) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Must have 0 &lt; quantile &lt; 1.&lt;/p\\\\&gt;&#x27;;\\n        return false;\\n    }\\n\\n    if (p[0] &gt;= p[1] || p[1] &gt;= p[2]) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Quantiles must be ordered lower, middle, upper.&lt;/p\\\\&gt;&#x27;;\\n        return false;\\n    }\\n\\n    if (x[0] &gt;= x[1] || x[1] &gt;= x[2]) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;yy values must be ordered, lower, middle, upper.&lt;/p\\\\&gt;&#x27;.replace(/yy/g, varName);\\n        return false;\\n    }\\n  }\\n\\n    return true;\\n}\\n\\n\\nclass UnivariateDistribution {\\n  constructor(parametrization) {\\n    \\n    this.name = &#x27;&#x27;;\\n\\n    \\n    this.varName = &#x27;&#x27;;\\n\\n    \\n    this.hardMin = 0;\\n    this.hardMax = Infinity;\\n\\n    \\n    this.p1Value = Infinity;\\n\\n    \\n    this.parametrization = parametrization\\n\\n    \\n    this.paramNames = [];\\n\\n    \\n    this.fixedParams = [];\\n\\n    \\n    this.epsilon = 1.0e-8\\n  }\\n\\n  generateActiveFixedInds() {\\n    \\n    this.activeParamsInds = [];\\n    this.fixedParamsInds = []\\n    for (let i = 0; i &lt; this.paramNames.length; i++) {\\n      if (this.fixedParams.includes(this.paramNames[i])) {\\n        this.fixedParamsInds.push(i);\\n      } else {\\n        this.activeParamsInds.push(i);\\n      }\\n    }\\n  }\\n\\n  xMin(params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  xMax(params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  cdfSingleValue({x, params, parametrization = this.parametrization}) {\\n    \\n  }\\n\\n  ppfSingleValue(p, params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  quantileSet(x, p, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  defaultXRange(params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n\\n  cdf(x, params, parametrization = this.parametrization) {\\n    params = this.scalarToArrayParams(params);\\n\\n    return this.scalarOrArrayCompute(\\n      (x, params) =&gt; this.cdfSingleValue(x, params, parametrization),\\n      x,\\n      params\\n    );\\n  }\\n\\n  ppfSingleValueWithCheck(p, params, parametrization = this.parametrization) {\\n    if (p &lt; 0 || p &gt; 1) return NaN;\\n    return this.ppfSingleValue(p, params, parametrization);\\n  }\\n\\n  ppf(p, params, parametrization = this.parametrization) {\\n    params = this.scalarToArrayParams(params);\\n\\n    return this.scalarOrArrayCompute(\\n      (p, params) =&gt; this.ppfSingleValueWithCheck(p, params, parametrization),\\n      p,\\n      params\\n    );\\n  }\\n\\n  resetXRange(params, p, parametrization = this.parametrization) {\\n    if (p === undefined) {\\n      return this.defaultXRange(params, parametrization);\\n    } else if (this.checkResetp(p)) {\\n      return this.ppf(p, params, parametrization);\\n    }\\n  }\\n\\n  scalarOrArrayCompute(func, x, params, parametrization = this.parametrization) {\\n    if (x instanceof Array) {\\n      let xLen = x.length;\\n\\n      let res = [];\\n      for (let i = 0; i &lt; xLen; i++) {\\n        res.push(func(x[i], params, parametrization));\\n      }\\n\\n      return res;\\n    } else {\\n      return func(x, params, parametrization);\\n    }\\n  }\\n\\n  scalarToArrayParams(params) {\\n    return params instanceof Array ? params : [params]\\n  }\\n}\\n\\nclass DiscreteUnivariateDistribution extends UnivariateDistribution {\\n  constructor(parametrization) {\\n    super(parametrization);\\n  }\\n\\n  pmfSingleValue(x, params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  pmf(x, params, parametrization = this.parametrization) {\\n    params = this.scalarToArrayParams(params);\\n\\n    return this.scalarOrArrayCompute(\\n      (x, params) =&gt; this.pmfSingleValue(x, params, parametrization),\\n      x,\\n      params);\\n  }\\n\\n  cdfSingleValue(x, params, parametrization = this.parametrization) {\\n    params = this.scalarToArrayParams(params);\\n\\n    \\n    let cumsum = 0.0;\\n    let summand = 0.0;\\n    for (let n = this.xMin(params, parametrization); n &lt;= x; n++) {\\n        summand = this.pmfSingleValue(n, params, parametrization);\\n        if (!isNaN(summand)) cumsum += summand;\\n    }\\n\\n    return cumsum;\\n  }\\n\\n  cdfForPlotting(xStart, xEnd, params, parametrization = this.parametrization) {\\n\\n    params = this.scalarToArrayParams(params);\\n\\n    \\n    let cumsum = 0.0;\\n    let prob;\\n    for (let x = this.xMin(params, parametrization); x &lt; xStart; x++) {\\n      prob = this.pmfSingleValue(x, params, parametrization);\\n      if (!isNaN(prob)) cumsum += prob;\\n    }\\n\\n    \\n    let yCDF = [];\\n    for (let x = xStart; x &lt; xEnd; x++) {\\n      prob = this.pmfSingleValue(x, params, parametrization);\\n      if (!isNaN(prob)) cumsum += prob;\\n      yCDF.push(cumsum, cumsum);\\n    }\\n\\n    return yCDF;\\n  }\\n\\n  ppfSingleValue(p, params, parametrization = this.parametrization) {\\n    if (p &lt; 0 || p &gt; 1) throw new Error(&#x27;p must be between 0 and 1.&#x27;)\\n\\n    \\n    if (p == 0) return xMin(params, parametrization);\\n\\n    \\n    if (p == 1) return xMax(params, parametrization);\\n\\n    params = this.scalarToArrayParams(params);\\n\\n    \\n    let n = this.xMin(params, parametrization);\\n    let cumsum = this.pmfSingleValue(n, params, parametrization);\\n\\n    let iters = 0;\\n    let summand = 0.0;\\n    let xMaxForTheseParams = this.xMax(params, parametrization);\\n    while (cumsum &lt; p &amp;&amp; !isclose(cumsum, p) &amp;&amp; !isNaN(summand) &amp;&amp; n &lt; xMaxForTheseParams) {\\n      n += 1;\\n      summand = this.pmfSingleValue(n, params, parametrization);\\n\\n      if (!isNaN(summand)) cumsum += summand;\\n\\n      iters += 1;\\n    }\\n\\n    return n;\\n  }\\n\\n}\\n\\nfunction isclose(x, y, rtol = 1.0e-7, atol = 1.0e-8) {\\n  return Math.abs(x - y) &lt;= (atol + rtol * Math.abs(y));\\n}\\n\\n\\nclass CategoricalDistribution extends DiscreteUnivariateDistribution {\\n  constructor() {\\n    super();\\n\\n    \\n    this.name = &#x27;Categorical&#x27;;\\n\\n    \\n    this.varName = &#x27;y&#x27;;\\n\\n    \\n    this.hardMin = 1;\\n    this.hardMax = 4;\\n\\n    \\n    this.paramNames = [&#x27;\\u03b81&#x27;, &#x27;\\u03b82&#x27;, &#x27;\\u03b83&#x27;];\\n\\n    \\n    this.fixedParams = [];\\n\\n    \\n    super.generateActiveFixedInds()\\n  }\\n\\n  xMin(params) {\\n    return 1;\\n  }\\n\\n  xMax(params) {\\n    return 4;\\n  }\\n\\n  pmfSingleValue(cat, params) {\\n    let [theta1, theta2, theta3] = params.slice(0, 3);\\n    let theta4 = 1 - theta1 - theta2 - theta3\\n\\n    \\n    if (theta4 &lt; 0) return NaN;\\n\\n    \\n    if (![1, 2, 3, 4].includes(cat)) return NaN;\\n\\n    let probs = [theta1, theta2, theta3, theta4]\\n\\n    return probs[cat-1];\\n  }\\n\\n  defaultXRange(params) {\\n    return [-0.25, 4.25];\\n  }\\n\\n  cdfSingleValue(x, params, xMin = 0) {\\n    \\n    let [theta1, theta2, theta3] = params.slice(0, 3);\\n    let theta4 = 1 - theta1 - theta2 - theta3\\n\\n    \\n    if (theta4 &lt; 0) return NaN;\\n\\n    \\n    let cumsum = 0.0;\\n    let summand = 0.0;\\n    for (let n = xMin; n &lt;= x; n++) {\\n        summand = this.pmfSingleValue(n, params);\\n        if (!isNaN(summand)) cumsum += summand;\\n    }\\n\\n    return cumsum;\\n  }\\n}\\n\\n\\n\\nvar dist = new CategoricalDistribution();\\n\\n\\nif (triggerCallbacks.active) {\\n  updateData(source_p, source_c, p_p, sliders, discrete);\\n}"}}]],["change:end",[{"id":"p4276"}]]]},"start":0.75,"end":4.25}},"y_range":{"type":"object","name":"Range1d","id":"p4223","attributes":{"start":-0.04,"end":1.04}},"x_scale":{"type":"object","name":"LinearScale","id":"p4186"},"y_scale":{"type":"object","name":"LinearScale","id":"p4187"},"title":{"type":"object","name":"Title","id":"p4179","attributes":{"text":"Categorical"}},"renderers":[{"type":"object","name":"GlyphRenderer","id":"p4248","attributes":{"data_source":{"id":"p4227"},"view":{"type":"object","name":"CDSView","id":"p4249","attributes":{"filter":{"type":"object","name":"AllIndices","id":"p4250"}}},"glyph":{"type":"object","name":"Circle","id":"p4245","attributes":{"x":{"type":"field","field":"x"},"y":{"type":"field","field":"y_p"},"size":{"type":"value","value":5},"line_color":{"type":"value","value":"#1f77b4"},"fill_color":{"type":"value","value":"#1f77b4"}}},"nonselection_glyph":{"type":"object","name":"Circle","id":"p4246","attributes":{"x":{"type":"field","field":"x"},"y":{"type":"field","field":"y_p"},"size":{"type":"value","value":5},"line_color":{"type":"value","value":"#1f77b4"},"line_alpha":{"type":"value","value":0.1},"fill_color":{"type":"value","value":"#1f77b4"},"fill_alpha":{"type":"value","value":0.1},"hatch_alpha":{"type":"value","value":0.1}}},"muted_glyph":{"type":"object","name":"Circle","id":"p4247","attributes":{"x":{"type":"field","field":"x"},"y":{"type":"field","field":"y_p"},"size":{"type":"value","value":5},"line_color":{"type":"value","value":"#1f77b4"},"line_alpha":{"type":"value","value":0.2},"fill_color":{"type":"value","value":"#1f77b4"},"fill_alpha":{"type":"value","value":0.2},"hatch_alpha":{"type":"value","value":0.2}}}}},{"type":"object","name":"GlyphRenderer","id":"p4257","attributes":{"data_source":{"id":"p4227"},"view":{"type":"object","name":"CDSView","id":"p4258","attributes":{"filter":{"type":"object","name":"AllIndices","id":"p4259"}}},"glyph":{"type":"object","name":"Segment","id":"p4254","attributes":{"x0":{"type":"field","field":"x"},"y0":{"type":"value","value":0},"x1":{"type":"field","field":"x"},"y1":{"type":"field","field":"y_p"},"line_color":{"type":"value","value":"#1f77b4"},"line_width":{"type":"value","value":2}}},"nonselection_glyph":{"type":"object","name":"Segment","id":"p4255","attributes":{"x0":{"type":"field","field":"x"},"y0":{"type":"value","value":0},"x1":{"type":"field","field":"x"},"y1":{"type":"field","field":"y_p"},"line_color":{"type":"value","value":"#1f77b4"},"line_alpha":{"type":"value","value":0.1},"line_width":{"type":"value","value":2}}},"muted_glyph":{"type":"object","name":"Segment","id":"p4256","attributes":{"x0":{"type":"field","field":"x"},"y0":{"type":"value","value":0},"x1":{"type":"field","field":"x"},"y1":{"type":"field","field":"y_p"},"line_color":{"type":"value","value":"#1f77b4"},"line_alpha":{"type":"value","value":0.2},"line_width":{"type":"value","value":2}}}}}],"toolbar":{"type":"object","name":"Toolbar","id":"p4185","attributes":{"tools":[{"type":"object","name":"SaveTool","id":"p4198"}]}},"toolbar_location":null,"left":[{"type":"object","name":"LinearAxis","id":"p4193","attributes":{"ticker":{"type":"object","name":"BasicTicker","id":"p4194","attributes":{"mantissas":[1,2,5]}},"formatter":{"type":"object","name":"BasicTickFormatter","id":"p4195"},"axis_label":"PMF","axis_label_text_font_style":"normal","major_label_policy":{"type":"object","name":"AllLabels","id":"p4196"}}}],"below":[{"type":"object","name":"LinearAxis","id":"p4188","attributes":{"ticker":{"type":"object","name":"FixedTicker","id":"p4224","attributes":{"ticks":[1,2,3,4],"minor_ticks":[]}},"formatter":{"type":"object","name":"BasicTickFormatter","id":"p4190"},"axis_label":"category","major_label_policy":{"type":"object","name":"AllLabels","id":"p4191"}}}],"center":[{"type":"object","name":"Grid","id":"p4192","attributes":{"axis":{"id":"p4188"}}},{"type":"object","name":"Grid","id":"p4197","attributes":{"dimension":1,"axis":{"id":"p4193"}}}],"frame_width":300,"frame_height":175,"background_fill_alpha":0,"border_fill_alpha":0}}],["p_c",{"id":"p4199"}],["source_p",{"id":"p4227"}],["source_c",{"id":"p4230"}],["discrete",true],["n",400],["sliders",[{"id":"p4261"},{"id":"p4263"},{"id":"p4265"}]],["xBoxes",[]],["pBoxes",[]],["quantileSetterSwitch",{"id":"p4273"}],["quantileSetterDiv",{"id":"p4272"}],["triggerCallbacks",{"id":"p4274"}],["startBoxes",[{"id":"p4266"},{"id":"p4267"},{"id":"p4268"}]],["endBoxes",[{"id":"p4269"},{"id":"p4270"},{"id":"p4271"}]]]},"code":"\\nfunction updateData(source_p, source_c, p_p, sliders, discrete) {\\n  if (discrete) {\\n    updateDiscretePMFandCDF(source_p, source_c, p_p.x_range, sliders);\\n  }\\n  else {\\n    updateContinuousPDFandCDF(source_p, source_c, p_p.x_range, sliders);\\n  }\\n}\\n\\n\\nfunction updateQuantiles(quantileSetterSwitch, sliders, xBoxes, pBoxes) {\\n  if (!quantileSetterSwitch.active) {\\n    let params = paramsFromSliders(sliders);\\n\\n    for (let i = 0; i &lt; xBoxes.length; i++) {\\n      xBoxes[i].value = dist.ppfSingleValue(Number(pBoxes[i].value), params).toPrecision(4);\\n    }\\n  }\\n}\\n\\n\\nfunction quantileSetter(xBoxes, pBoxes, quantileSetterDiv, sliders, startBoxes, endBoxes, p_p, p_c, source_p) {\\n  \\n  triggerCallbacks.active = false;\\n\\n  \\n  let x = paramsFromBoxes(xBoxes);\\n  let p = paramsFromBoxes(pBoxes);\\n\\n  \\n  let params = paramsFromSliders(sliders);\\n\\n  \\n  let inputOk = checkQuantileInput(x, p, dist.hardMin, dist.hardMax, dist.varName, quantileSetterDiv);\\n\\n  if (inputOk) {\\n    \\n    let extraParams = [];\\n    for (let i = 0; i &lt; dist.paramNames.length; i++) {\\n      if (dist.fixedParamsInds.includes(i)) {\\n        extraParams.push(params[i]);\\n      }\\n    }\\n\\n    \\n    let errText = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Failed to find parameters to match quantiles.&lt;/p&gt;&#x27;;\\n\\n    \\n    let optimParams, optimSuccess;\\n    try {\\n      [optimParams, optimSuccess] = dist.quantileSet(x, p, extraParams);\\n    } catch(e) {\\n      optimSuccess = false;\\n      errText = &#x27;&lt;p style=\\"color:tomato;\\"&gt;&#x27; + e.message; + &#x27;&lt;/p&gt;&#x27;;\\n    }\\n\\n    let text;\\n    if (optimSuccess) {\\n      \\n      text = &#x27;&lt;p&gt;&#x27;;\\n      for (let i = 0; i &lt; optimParams.length - 1; i++) {\\n        text += dist.paramNames[dist.activeParamsInds[i]] + &#x27; = &#x27; + optimParams[i].toPrecision(4) + &#x27;, &#x27;;\\n      }\\n      let i = optimParams.length - 1;\\n      text += dist.paramNames[dist.activeParamsInds[i]] + &#x27; = &#x27; + optimParams[i].toPrecision(4) + &#x27;&lt;/p&gt;&#x27;;\\n    } else{\\n      text = errText;\\n    }\\n\\n    quantileSetterDiv.text = text;\\n\\n    if (optimSuccess) {\\n      \\n      for (let i = 0; i &lt; optimParams.length; i++ ){\\n        if (sliders[dist.activeParamsInds[i]].start &gt; optimParams[i] || sliders[dist.activeParamsInds[i]].end &lt; optimParams[i]) {\\n          startBoxes[dist.activeParamsInds[i]].value = (4 * optimParams[i] / 1001).toPrecision(4);\\n          endBoxes[dist.activeParamsInds[i]].value = (4 * optimParams[i]).toPrecision(4);        \\n        }\\n        sliders[dist.activeParamsInds[i]].value = optimParams[i];\\n      }\\n\\n      params = paramsFromSliders(sliders); \\n\\n      \\n      let [x1, x2] = dist.defaultXRange(params);\\n\\n      p_p.x_range.start = x1;\\n      p_p.x_range.end = x2;\\n\\n      \\n      updateData(source_p, source_c, p_p, sliders, discrete);\\n\\n      \\n      setYRanges(p_p, p_c, source_p);  \\n    }\\n  }\\n\\n  \\n  triggerCallbacks.active = true;  \\n}\\n\\n\\nfunction updateContinuousPDFandCDF(source_p, source_c, xRange, sliders) {\\n  \\n  let x_p = source_p.data[&#x27;x&#x27;];\\n  let y_p = source_p.data[&#x27;y_p&#x27;];\\n  let x_c = source_c.data[&#x27;x&#x27;];\\n  let y_c = source_c.data[&#x27;y_c&#x27;];\\n  let xRangeMin = xRange.start;\\n  let xRangeMax = xRange.end;\\n\\n  \\n  x_p = linspace(xRangeMin, xRangeMax, n);\\n  x_c = x_p;\\n\\n  \\n  source_p.data[&#x27;x&#x27;] = x_p;\\n  source_c.data[&#x27;x&#x27;] = x_c;\\n\\n  \\n  let params = paramsFromSliders(sliders);\\n\\n  \\n  let pdf = dist.pdf(x_p, params);\\n\\n  \\n  pdf = pdf.map(val =&gt; (val === Infinity || val === -Infinity) ? NaN : val);\\n\\n  \\n  source_p.data[&#x27;y_p&#x27;] = pdf;\\n  source_c.data[&#x27;y_c&#x27;] = dist.cdf(x_c, params);\\n\\n  source_p.change.emit();\\n  source_c.change.emit();\\n}\\n\\n\\nfunction updateDiscretePMFandCDF(source_p, source_c, xRange, sliders) {\\n  \\n  let xRangeMin = Math.floor(xRange.start);\\n  let xRangeMax = Math.ceil(xRange.end);\\n\\n  \\n  let x_p = arange(xRangeMin, xRangeMax + 1);\\n\\n  \\n  let x_c = [xRangeMin - 1, ...x_p.flatMap(x =&gt; [x, x]), xRangeMax + 1];\\n\\n  \\n  source_p.data[&#x27;x&#x27;] = x_p;\\n  source_c.data[&#x27;x&#x27;] = x_c;\\n\\n  \\n  let params = paramsFromSliders(sliders);\\n\\n  \\n  source_p.data[&#x27;y_p&#x27;] = dist.pmf(x_p, params);\\n  source_c.data[&#x27;y_c&#x27;] = dist.cdfForPlotting(x_c[0], x_c[x_c.length - 1], params);\\n\\n  source_p.change.emit();\\n  source_c.change.emit();\\n}\\n\\n\\nfunction linspace(start, stop, n) {\\n  let x = new Array(n);\\n  let step = (stop - start) / (n - 1);\\n  for (let i = 0; i &lt; n; i++) {\\n    x[i] = start + i * step;\\n  }\\n\\n  return x;\\n}\\n\\n\\nfunction paramsFromSliders(sliders) {\\n  let params = [];\\n  for (let slider of sliders) {\\n    params.push(slider.value);\\n  }\\n\\n  return params;\\n}\\n\\n\\nfunction arange(start, stop) {\\n  let x = new Array(stop - start);\\n  for (let i = 0; i &lt; stop - start; i++) {\\n    x[i] = start + i;\\n  }\\n\\n  return x;\\n}\\n\\n\\nfunction paramsFromBoxes(boxes) {\\n  let params = [];\\n  for (let box of boxes) {\\n    params.push(Number(box.value));\\n  }\\n\\n  return params;\\n}\\n\\n\\nfunction setYRanges(p_p, p_c, source_p) {\\n    p_c.y_range.start = -0.04;\\n    p_c.y_range.end = 1.04;        \\n\\n    let pdfMax = source_p.data[&#x27;y_p&#x27;];\\n    p_p.y_range.start = -pdfMax * 0.04;\\n    p_p.y_range.end = 1.04 * pdfMax;\\n}\\n\\n\\nfunction checkQuantileInput(x, p, xMin, xMax, varName, quantileSetterDiv) {\\n  for (let i = 0; i &lt; x.length; i++) {\\n    if (p[i] &lt;= 0 || p[i] &gt;= 1) {\\n      quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Must have 0 &lt; quantile &lt; 1.&lt;/p\\\\&gt;&#x27;;\\n      return false; \\n    }\\n\\n    if (x[i] &lt; xMin || x[i] &gt; xMax) {\\n      let qStr = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Must have &#x27; + xMin.toString() + &#x27; \\u2264 yy \\u2264&#x27; + xMax.toString() + &#x27;.&lt;/p\\\\&gt;&#x27;;\\n      quantileSetterDiv.text = qStr.replace(/yy/g, varName);\\n      return false;\\n    }\\n  }\\n\\n\\n  if (p.length === 2) {\\n    if (p[1] &lt;= 0 || p[1] &gt;= 1) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Must have 0 &lt; quantile &lt; 1.&lt;/p\\\\&gt;&#x27;;\\n        return false;\\n    }\\n\\n    if (p[0] &gt;= p[1]) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Lower quantile must be less than upper quantile.&lt;/p\\\\&gt;&#x27;;\\n        return false;\\n    }\\n\\n    if (x[0] &gt;= x[1]) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Lower yy must be less than upper yy.&lt;/p\\\\&gt;&#x27;.replace(/yy/g, varName);\\n        return false;        \\n    }\\n  }\\n\\n  if (p.length === 3) {\\n    if (p[2] &lt;= 0 || p[2] &gt;= 1 || p[1] &lt;= 0 || p[1] &gt;= 1) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Must have 0 &lt; quantile &lt; 1.&lt;/p\\\\&gt;&#x27;;\\n        return false;\\n    }\\n\\n    if (p[0] &gt;= p[1] || p[1] &gt;= p[2]) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;Quantiles must be ordered lower, middle, upper.&lt;/p\\\\&gt;&#x27;;\\n        return false;\\n    }\\n\\n    if (x[0] &gt;= x[1] || x[1] &gt;= x[2]) {\\n        quantileSetterDiv.text = &#x27;&lt;p style=\\"color:tomato;\\"&gt;yy values must be ordered, lower, middle, upper.&lt;/p\\\\&gt;&#x27;.replace(/yy/g, varName);\\n        return false;\\n    }\\n  }\\n\\n    return true;\\n}\\n\\n\\nclass UnivariateDistribution {\\n  constructor(parametrization) {\\n    \\n    this.name = &#x27;&#x27;;\\n\\n    \\n    this.varName = &#x27;&#x27;;\\n\\n    \\n    this.hardMin = 0;\\n    this.hardMax = Infinity;\\n\\n    \\n    this.p1Value = Infinity;\\n\\n    \\n    this.parametrization = parametrization\\n\\n    \\n    this.paramNames = [];\\n\\n    \\n    this.fixedParams = [];\\n\\n    \\n    this.epsilon = 1.0e-8\\n  }\\n\\n  generateActiveFixedInds() {\\n    \\n    this.activeParamsInds = [];\\n    this.fixedParamsInds = []\\n    for (let i = 0; i &lt; this.paramNames.length; i++) {\\n      if (this.fixedParams.includes(this.paramNames[i])) {\\n        this.fixedParamsInds.push(i);\\n      } else {\\n        this.activeParamsInds.push(i);\\n      }\\n    }\\n  }\\n\\n  xMin(params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  xMax(params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  cdfSingleValue({x, params, parametrization = this.parametrization}) {\\n    \\n  }\\n\\n  ppfSingleValue(p, params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  quantileSet(x, p, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  defaultXRange(params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n\\n  cdf(x, params, parametrization = this.parametrization) {\\n    params = this.scalarToArrayParams(params);\\n\\n    return this.scalarOrArrayCompute(\\n      (x, params) =&gt; this.cdfSingleValue(x, params, parametrization),\\n      x,\\n      params\\n    );\\n  }\\n\\n  ppfSingleValueWithCheck(p, params, parametrization = this.parametrization) {\\n    if (p &lt; 0 || p &gt; 1) return NaN;\\n    return this.ppfSingleValue(p, params, parametrization);\\n  }\\n\\n  ppf(p, params, parametrization = this.parametrization) {\\n    params = this.scalarToArrayParams(params);\\n\\n    return this.scalarOrArrayCompute(\\n      (p, params) =&gt; this.ppfSingleValueWithCheck(p, params, parametrization),\\n      p,\\n      params\\n    );\\n  }\\n\\n  resetXRange(params, p, parametrization = this.parametrization) {\\n    if (p === undefined) {\\n      return this.defaultXRange(params, parametrization);\\n    } else if (this.checkResetp(p)) {\\n      return this.ppf(p, params, parametrization);\\n    }\\n  }\\n\\n  scalarOrArrayCompute(func, x, params, parametrization = this.parametrization) {\\n    if (x instanceof Array) {\\n      let xLen = x.length;\\n\\n      let res = [];\\n      for (let i = 0; i &lt; xLen; i++) {\\n        res.push(func(x[i], params, parametrization));\\n      }\\n\\n      return res;\\n    } else {\\n      return func(x, params, parametrization);\\n    }\\n  }\\n\\n  scalarToArrayParams(params) {\\n    return params instanceof Array ? params : [params]\\n  }\\n}\\n\\nclass DiscreteUnivariateDistribution extends UnivariateDistribution {\\n  constructor(parametrization) {\\n    super(parametrization);\\n  }\\n\\n  pmfSingleValue(x, params, parametrization = this.parametrization) {\\n    \\n  }\\n\\n  pmf(x, params, parametrization = this.parametrization) {\\n    params = this.scalarToArrayParams(params);\\n\\n    return this.scalarOrArrayCompute(\\n      (x, params) =&gt; this.pmfSingleValue(x, params, parametrization),\\n      x,\\n      params);\\n  }\\n\\n  cdfSingleValue(x, params, parametrization = this.parametrization) {\\n    params = this.scalarToArrayParams(params);\\n\\n    \\n    let cumsum = 0.0;\\n    let summand = 0.0;\\n    for (let n = this.xMin(params, parametrization); n &lt;= x; n++) {\\n        summand = this.pmfSingleValue(n, params, parametrization);\\n        if (!isNaN(summand)) cumsum += summand;\\n    }\\n\\n    return cumsum;\\n  }\\n\\n  cdfForPlotting(xStart, xEnd, params, parametrization = this.parametrization) {\\n\\n    params = this.scalarToArrayParams(params);\\n\\n    \\n    let cumsum = 0.0;\\n    let prob;\\n    for (let x = this.xMin(params, parametrization); x &lt; xStart; x++) {\\n      prob = this.pmfSingleValue(x, params, parametrization);\\n      if (!isNaN(prob)) cumsum += prob;\\n    }\\n\\n    \\n    let yCDF = [];\\n    for (let x = xStart; x &lt; xEnd; x++) {\\n      prob = this.pmfSingleValue(x, params, parametrization);\\n      if (!isNaN(prob)) cumsum += prob;\\n      yCDF.push(cumsum, cumsum);\\n    }\\n\\n    return yCDF;\\n  }\\n\\n  ppfSingleValue(p, params, parametrization = this.parametrization) {\\n    if (p &lt; 0 || p &gt; 1) throw new Error(&#x27;p must be between 0 and 1.&#x27;)\\n\\n    \\n    if (p == 0) return xMin(params, parametrization);\\n\\n    \\n    if (p == 1) return xMax(params, parametrization);\\n\\n    params = this.scalarToArrayParams(params);\\n\\n    \\n    let n = this.xMin(params, parametrization);\\n    let cumsum = this.pmfSingleValue(n, params, parametrization);\\n\\n    let iters = 0;\\n    let summand = 0.0;\\n    let xMaxForTheseParams = this.xMax(params, parametrization);\\n    while (cumsum &lt; p &amp;&amp; !isclose(cumsum, p) &amp;&amp; !isNaN(summand) &amp;&amp; n &lt; xMaxForTheseParams) {\\n      n += 1;\\n      summand = this.pmfSingleValue(n, params, parametrization);\\n\\n      if (!isNaN(summand)) cumsum += summand;\\n\\n      iters += 1;\\n    }\\n\\n    return n;\\n  }\\n\\n}\\n\\nfunction isclose(x, y, rtol = 1.0e-7, atol = 1.0e-8) {\\n  return Math.abs(x - y) &lt;= (atol + rtol * Math.abs(y));\\n}\\n\\n\\nclass CategoricalDistribution extends DiscreteUnivariateDistribution {\\n  constructor() {\\n    super();\\n\\n    \\n    this.name = &#x27;Categorical&#x27;;\\n\\n    \\n    this.varName = &#x27;y&#x27;;\\n\\n    \\n    this.hardMin = 1;\\n    this.hardMax = 4;\\n\\n    \\n    this.paramNames = [&#x27;\\u03b81&#x27;, &#x27;\\u03b82&#x27;, &#x27;\\u03b83&#x27;];\\n\\n    \\n    this.fixedParams = [];\\n\\n    \\n    super.generateActiveFixedInds()\\n  }\\n\\n  xMin(params) {\\n    return 1;\\n  }\\n\\n  xMax(params) {\\n    return 4;\\n  }\\n\\n  pmfSingleValue(cat, params) {\\n    let [theta1, theta2, theta3] = params.slice(0, 3);\\n    let theta4 = 1 - theta1 - theta2 - theta3\\n\\n    \\n    if (theta4 &lt; 0) return NaN;\\n\\n    \\n    if (![1, 2, 3, 4].includes(cat)) return NaN;\\n\\n    let probs = [theta1, theta2, theta3, theta4]\\n\\n    return probs[cat-1];\\n  }\\n\\n  defaultXRange(params) {\\n    return [-0.25, 4.25];\\n  }\\n\\n  cdfSingleValue(x, params, xMin = 0) {\\n    \\n    let [theta1, theta2, theta3] = params.slice(0, 3);\\n    let theta4 = 1 - theta1 - theta2 - theta3\\n\\n    \\n    if (theta4 &lt; 0) return NaN;\\n\\n    \\n    let cumsum = 0.0;\\n    let summand = 0.0;\\n    for (let n = xMin; n &lt;= x; n++) {\\n        summand = this.pmfSingleValue(n, params);\\n        if (!isNaN(summand)) cumsum += summand;\\n    }\\n\\n    return cumsum;\\n  }\\n}\\n\\n\\n\\nvar dist = new CategoricalDistribution();\\n\\n\\n\\nif (triggerCallbacks.active &amp;&amp; !cb_obj.disabled) {\\n\\tif (quantileSetterSwitch.active) {\\n\\t\\tquantileSetter(xBoxes, pBoxes, quantileSetterDiv, sliders, startBoxes, endBoxes, p_p, p_c, source_p);\\n\\t}\\n\\telse {\\n\\t\\tupdateData(source_p, source_c, p_p, sliders, discrete);\\n\\t\\tupdateQuantiles(quantileSetterSwitch, sliders, xBoxes, pBoxes);\\n\\t}\\n}"}}]]]},"width":200,"title":"\\u03b8\\u2081","format":{"type":"object","name":"CustomJSTickFormatter","id":"p4260","attributes":{"code":"return tick.toPrecision(4)"}},"start":0,"end":1,"value":0.2,"step":0.01}}]]},"code":"\\n\\nslider.start = Math.max(minValue, Number(cb_obj.value));\\nslider.step = (slider.end - slider.start) / 1000;"}}]]]},"width":70,"value":"0"}}]}},{"id":"p4261"},{"type":"object","name":"Column","id":"p4292","attributes":{"children":[{"type":"object","name":"Spacer","id":"p4291","attributes":{"height":4}},{"id":"p4269"}]}}]}},{"type":"object","name":"Row","id":"p4302","attributes":{"children":[{"type":"object","name":"Column","id":"p4294","attributes":{"children":[{"type":"object","name":"Spacer","id":"p4293","attributes":{"height":4}},{"id":"p4267"}]}},{"id":"p4263"},{"type":"object","name":"Column","id":"p4296","attributes":{"children":[{"type":"object","name":"Spacer","id":"p4295","attributes":{"height":4}},{"id":"p4270"}]}}]}},{"type":"object","name":"Row","id":"p4303","attributes":{"children":[{"type":"object","name":"Column","id":"p4298","attributes":{"children":[{"type":"object","name":"Spacer","id":"p4297","attributes":{"height":4}},{"id":"p4268"}]}},{"id":"p4265"},{"type":"object","name":"Column","id":"p4300","attributes":{"children":[{"type":"object","name":"Spacer","id":"p4299","attributes":{"height":4}},{"id":"p4271"}]}}]}}]}},{"type":"object","name":"Spacer","id":"p4311","attributes":{"height":10}},{"type":"object","name":"GridPlot","id":"p4308","attributes":{"rows":null,"cols":null,"toolbar":{"type":"object","name":"Toolbar","id":"p4307","attributes":{"tools":[{"type":"object","name":"SaveTool","id":"p4306"}]}},"toolbar_location":"right","children":[[{"id":"p4176"},0,0],[{"type":"object","name":"Spacer","id":"p4305","attributes":{"width":30}},0,1],[{"id":"p4199"},0,2]]}}]}}]}}';
                  const render_items = [{"docid":"d2d18702-cdc3-4069-8a2f-8b96de80fbb9","roots":{"p4312":"ad63c18b-43cf-4ff1-89d9-494143ffaa9b"},"root_ids":["p4312"]}];
                  root.Bokeh.embed.embed_items(docs_json, render_items);
                  }
                  if (root.Bokeh !== undefined) {
                    embed_document(root);
                  } else {
                    let attempts = 0;
                    const timer = setInterval(function(root) {
                      if (root.Bokeh !== undefined) {
                        clearInterval(timer);
                        embed_document(root);
                      } else {
                        attempts++;
                        if (attempts > 100) {
                          clearInterval(timer);
                          console.log("Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing");
                        }
                      }
                    }, 10, root)
                  }
                })(window);
              });
            };
            if (document.readyState != "loading") fn();
            else document.addEventListener("DOMContentLoaded", fn);
          })();
        },
    function(Bokeh) {
        }
      ];
    
      function run_inline_js() {
        for (let i = 0; i < inline_js.length; i++) {
          inline_js[i].call(root, root.Bokeh);
        }
      }
    
      if (root._bokeh_is_loading === 0) {
        console.debug("Bokeh: BokehJS loaded, going straight to plotting");
        run_inline_js();
      } else {
        load_libs(css_urls, js_urls, function() {
          console.debug("Bokeh: BokehJS plotting callback run at", now());
          run_inline_js();
        });
      }
    }(window));
  };
  if (document.readyState != "loading") fn();
  else document.addEventListener("DOMContentLoaded", fn);
})();